{"title":"Vue3基础知识整理","slug":"vue-3","date":"2021-09-13T16:00:00.000Z","updated":"2021-09-20T13:53:18.789Z","comments":true,"path":"api/articles/vue-3.json","excerpt":null,"covers":["https://cdn.jsdelivr.net/gh/Rr210/image@master/hexo/api/20210916145401.png"],"content":"<h2 id=\"使用vite安装vue3项目\"><a href=\"#使用vite安装vue3项目\" class=\"headerlink\" title=\"使用vite安装vue3项目\"></a>使用vite安装vue3项目</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init vite-app 项目的名称</span><br><span class=\"line\">cd 项目的名称</span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"样式穿透\"><a href=\"#样式穿透\" class=\"headerlink\" title=\"样式穿透\"></a>样式穿透</h2><ul>\n<li>Vue3 使用 <code>:deep()</code> 代替 <code>/deep/</code></li>\n</ul>\n<h2 id=\"兄弟之间的传值\"><a href=\"#兄弟之间的传值\" class=\"headerlink\" title=\"兄弟之间的传值\"></a>兄弟之间的传值</h2><ul>\n<li>使用eventBus</li>\n<li>使用mitt依赖包<a href=\"https://www.npmjs.com/package/mitt\">mitt依赖包</a></li>\n</ul>\n<h2 id=\"后代关系之间的数据共享\"><a href=\"#后代关系之间的数据共享\" class=\"headerlink\" title=\"后代关系之间的数据共享\"></a>后代关系之间的数据共享</h2><ul>\n<li>使用<code>provide</code>方法发送数据 使用<code>inject</code>数组接受数据</li>\n<li>默认导入的数据不是响应式的数据</li>\n<li>在使用provide返回数据时  对数据进包装 使用<code>computed</code>方法, 实现响应式的数据</li>\n</ul>\n<h2 id=\"代理服务器\"><a href=\"#代理服务器\" class=\"headerlink\" title=\"代理服务器\"></a>代理服务器</h2><ul>\n<li>devServer 配置多个代理</li>\n<li>使用pathRewrite</li>\n<li>方式一</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  proxy: <span class=\"string\">&#x27;http://localhost:5000&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明</p>\n<ol>\n<li>优点：配置简单，请求资源时直接发给前端</li>\n<li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理</li>\n<li>工作方式：当请求了前端不存在的资源时，请求会转发给服务器(优先匹配前端的资源)</li>\n</ol>\n<ul>\n<li>方式二</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    proxy: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;/api1&#x27;</span>: &#123;</span><br><span class=\"line\">        target: <span class=\"string\">&#x27;http://lcoalhost:5000&#x27;</span>,</span><br><span class=\"line\">        changeOrigin: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        pathRewrite: &#123;</span><br><span class=\"line\">          <span class=\"string\">&#x27;^/api1&#x27;</span>: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">&#x27;/api2&#x27;</span>: &#123;</span><br><span class=\"line\">        target: <span class=\"string\">&#x27;http://localhost:5001&#x27;</span>,</span><br><span class=\"line\">        changeOrigin: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        pathRewrite: &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;^/api2&quot;</span>: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>优点：可以配置多个代理</li>\n<li>缺点：配置较为繁琐</li>\n</ol>\n<h2 id=\"vuex\"><a href=\"#vuex\" class=\"headerlink\" title=\"vuex\"></a>vuex</h2><ul>\n<li>数据共享的方案</li>\n<li>多组件依赖同一状态</li>\n<li>来自不同组件的行为需要变更同一个状态</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Rr210/image@master/hexo/api/20210916145401.png\" alt=\"vuex\"></p>\n<ul>\n<li>使用<code>this</code>方法来获取store</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\">app.config.globalProperties.$store = store</span><br><span class=\"line\"><span class=\"comment\">// store.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  createStore</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">jia</span>(<span class=\"params\">context, value</span>)</span> &#123;</span><br><span class=\"line\">    context.commit(<span class=\"string\">&#x27;JIA&#x27;</span>, value);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">jiaOdd</span>(<span class=\"params\">context, value</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (context.state.sum % <span class=\"number\">2</span>) context.commit(<span class=\"string\">&#x27;JIA&#x27;</span>, value);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">  sum: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">JIA</span>(<span class=\"params\">state, value</span>)</span> &#123;</span><br><span class=\"line\">    state.sum += value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">bigSum</span>(<span class=\"params\">state</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state.sum * <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> createStore(&#123;</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  getters,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  actions</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用mapState方法来生成计算属性, 使用对象的方式生成 使用数组的方法生成</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对象的方式生成</span></span><br><span class=\"line\">  ...mapState(&#123;</span><br><span class=\"line\">    sum: <span class=\"string\">&quot;sum&quot;</span>,</span><br><span class=\"line\">    user: <span class=\"string\">&quot;user&quot;</span>,</span><br><span class=\"line\">    cardID: <span class=\"string\">&quot;cardID&quot;</span></span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  <span class=\"comment\">// 数组的方式生成</span></span><br><span class=\"line\">  ...mapGetters([<span class=\"string\">&#x27;bigSum&#x27;</span>])</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<ul>\n<li>mapMutations 借助这个方法 调用commit 去联系mutations</li>\n<li>使用nanoid生成唯一的ID</li>\n</ul>\n<h3 id=\"使用模块化\"><a href=\"#使用模块化\" class=\"headerlink\" title=\"使用模块化\"></a>使用模块化</h3><p>【<a href=\"https://vuex.vuejs.org/zh/guide/modules.html\">模块化</a>】</p>\n<h3 id=\"命名路由\"><a href=\"#命名路由\" class=\"headerlink\" title=\"命名路由\"></a>命名路由</h3><ul>\n<li>路径过长时 可以使用命名路由的方式简化</li>\n</ul>\n<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><ul>\n<li>传递参数的时候 使用prop简化输出</li>\n<li>有对象的形式或者布尔值</li>\n<li>如果传递的参数为布尔值时, 将该组件接受的的params参数全部的传递给渲染的组件</li>\n<li>第三种写法: 值为函数, 传递参数$router</li>\n<li>在跳转路由时 如果使用params传递参数时, 则不能使用path, 只能使用命名路由 name</li>\n</ul>\n<h2 id=\"编程式路由导航\"><a href=\"#编程式路由导航\" class=\"headerlink\" title=\"编程式路由导航\"></a>编程式路由导航</h2><ul>\n<li>vue3在使用编程式导航时 需要导入router</li>\n<li>在全局前置路由中 使用<code>meta</code>属性来定义路由元, 进行路由的拦截</li>\n<li>借助全局后置路由<code>afterEach</code>实现页面标题的动态切换<code>document.title</code></li>\n<li>独享的路由守卫 <code>beforeEnter</code>, 只有前置</li>\n</ul>\n<h3 id=\"组件内守卫\"><a href=\"#组件内守卫\" class=\"headerlink\" title=\"组件内守卫\"></a>组件内守卫</h3><ul>\n<li>组件内守卫  需要根据<code>beforeRouterEnter</code> 进入守卫 通过路由规则, 进入该组件时倍调用</li>\n<li>离开守卫, 通过路由规则, 离开该组件时倍调用<code>beforeRouterLeave</code></li>\n<li>注意使用时执行完成需要放行</li>\n</ul>\n<h2 id=\"路由器的两种工作模式\"><a href=\"#路由器的两种工作模式\" class=\"headerlink\" title=\"路由器的两种工作模式\"></a>路由器的两种工作模式</h2><ul>\n<li>hash模式 <ol>\n<li>地址中的永远带的#号，不美观</li>\n<li>若以后将地址通过第三方手机app分享，若app的校验严格，则地址会被标记为不合法</li>\n<li>兼容性好 </li>\n</ol>\n</li>\n<li>history模式<ol>\n<li>地址干净美观</li>\n<li>兼容性和hash模式相比略差</li>\n<li>应用部署上线时需要后端人员支持，解决刷新页面服务端的404的问题</li>\n<li>解决以上问题使用 <code>connect-history-api-fallback</code> npm包</li>\n</ol>\n</li>\n</ul>\n","more":"<h2 id=\"使用vite安装vue3项目\"><a href=\"#使用vite安装vue3项目\" class=\"headerlink\" title=\"使用vite安装vue3项目\"></a>使用vite安装vue3项目</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init vite-app 项目的名称</span><br><span class=\"line\">cd 项目的名称</span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"样式穿透\"><a href=\"#样式穿透\" class=\"headerlink\" title=\"样式穿透\"></a>样式穿透</h2><ul>\n<li>Vue3 使用 <code>:deep()</code> 代替 <code>/deep/</code></li>\n</ul>\n<h2 id=\"兄弟之间的传值\"><a href=\"#兄弟之间的传值\" class=\"headerlink\" title=\"兄弟之间的传值\"></a>兄弟之间的传值</h2><ul>\n<li>使用eventBus</li>\n<li>使用mitt依赖包<a href=\"https://www.npmjs.com/package/mitt\">mitt依赖包</a></li>\n</ul>\n<h2 id=\"后代关系之间的数据共享\"><a href=\"#后代关系之间的数据共享\" class=\"headerlink\" title=\"后代关系之间的数据共享\"></a>后代关系之间的数据共享</h2><ul>\n<li>使用<code>provide</code>方法发送数据 使用<code>inject</code>数组接受数据</li>\n<li>默认导入的数据不是响应式的数据</li>\n<li>在使用provide返回数据时  对数据进包装 使用<code>computed</code>方法, 实现响应式的数据</li>\n</ul>\n<h2 id=\"代理服务器\"><a href=\"#代理服务器\" class=\"headerlink\" title=\"代理服务器\"></a>代理服务器</h2><ul>\n<li>devServer 配置多个代理</li>\n<li>使用pathRewrite</li>\n<li>方式一</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  proxy: <span class=\"string\">&#x27;http://localhost:5000&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明</p>\n<ol>\n<li>优点：配置简单，请求资源时直接发给前端</li>\n<li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理</li>\n<li>工作方式：当请求了前端不存在的资源时，请求会转发给服务器(优先匹配前端的资源)</li>\n</ol>\n<ul>\n<li>方式二</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    proxy: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;/api1&#x27;</span>: &#123;</span><br><span class=\"line\">        target: <span class=\"string\">&#x27;http://lcoalhost:5000&#x27;</span>,</span><br><span class=\"line\">        changeOrigin: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        pathRewrite: &#123;</span><br><span class=\"line\">          <span class=\"string\">&#x27;^/api1&#x27;</span>: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">&#x27;/api2&#x27;</span>: &#123;</span><br><span class=\"line\">        target: <span class=\"string\">&#x27;http://localhost:5001&#x27;</span>,</span><br><span class=\"line\">        changeOrigin: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        pathRewrite: &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;^/api2&quot;</span>: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>优点：可以配置多个代理</li>\n<li>缺点：配置较为繁琐</li>\n</ol>\n<h2 id=\"vuex\"><a href=\"#vuex\" class=\"headerlink\" title=\"vuex\"></a>vuex</h2><ul>\n<li>数据共享的方案</li>\n<li>多组件依赖同一状态</li>\n<li>来自不同组件的行为需要变更同一个状态</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Rr210/image@master/hexo/api/20210916145401.png\" alt=\"vuex\"></p>\n<ul>\n<li>使用<code>this</code>方法来获取store</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\">app.config.globalProperties.$store = store</span><br><span class=\"line\"><span class=\"comment\">// store.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  createStore</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">jia</span>(<span class=\"params\">context, value</span>)</span> &#123;</span><br><span class=\"line\">    context.commit(<span class=\"string\">&#x27;JIA&#x27;</span>, value);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">jiaOdd</span>(<span class=\"params\">context, value</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (context.state.sum % <span class=\"number\">2</span>) context.commit(<span class=\"string\">&#x27;JIA&#x27;</span>, value);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">  sum: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">JIA</span>(<span class=\"params\">state, value</span>)</span> &#123;</span><br><span class=\"line\">    state.sum += value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">bigSum</span>(<span class=\"params\">state</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state.sum * <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> createStore(&#123;</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  getters,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  actions</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用mapState方法来生成计算属性, 使用对象的方式生成 使用数组的方法生成</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对象的方式生成</span></span><br><span class=\"line\">  ...mapState(&#123;</span><br><span class=\"line\">    sum: <span class=\"string\">&quot;sum&quot;</span>,</span><br><span class=\"line\">    user: <span class=\"string\">&quot;user&quot;</span>,</span><br><span class=\"line\">    cardID: <span class=\"string\">&quot;cardID&quot;</span></span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  <span class=\"comment\">// 数组的方式生成</span></span><br><span class=\"line\">  ...mapGetters([<span class=\"string\">&#x27;bigSum&#x27;</span>])</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<ul>\n<li>mapMutations 借助这个方法 调用commit 去联系mutations</li>\n<li>使用nanoid生成唯一的ID</li>\n</ul>\n<h3 id=\"使用模块化\"><a href=\"#使用模块化\" class=\"headerlink\" title=\"使用模块化\"></a>使用模块化</h3><p>【<a href=\"https://vuex.vuejs.org/zh/guide/modules.html\">模块化</a>】</p>\n<h3 id=\"命名路由\"><a href=\"#命名路由\" class=\"headerlink\" title=\"命名路由\"></a>命名路由</h3><ul>\n<li>路径过长时 可以使用命名路由的方式简化</li>\n</ul>\n<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><ul>\n<li>传递参数的时候 使用prop简化输出</li>\n<li>有对象的形式或者布尔值</li>\n<li>如果传递的参数为布尔值时, 将该组件接受的的params参数全部的传递给渲染的组件</li>\n<li>第三种写法: 值为函数, 传递参数$router</li>\n<li>在跳转路由时 如果使用params传递参数时, 则不能使用path, 只能使用命名路由 name</li>\n</ul>\n<h2 id=\"编程式路由导航\"><a href=\"#编程式路由导航\" class=\"headerlink\" title=\"编程式路由导航\"></a>编程式路由导航</h2><ul>\n<li>vue3在使用编程式导航时 需要导入router</li>\n<li>在全局前置路由中 使用<code>meta</code>属性来定义路由元, 进行路由的拦截</li>\n<li>借助全局后置路由<code>afterEach</code>实现页面标题的动态切换<code>document.title</code></li>\n<li>独享的路由守卫 <code>beforeEnter</code>, 只有前置</li>\n</ul>\n<h3 id=\"组件内守卫\"><a href=\"#组件内守卫\" class=\"headerlink\" title=\"组件内守卫\"></a>组件内守卫</h3><ul>\n<li>组件内守卫  需要根据<code>beforeRouterEnter</code> 进入守卫 通过路由规则, 进入该组件时倍调用</li>\n<li>离开守卫, 通过路由规则, 离开该组件时倍调用<code>beforeRouterLeave</code></li>\n<li>注意使用时执行完成需要放行</li>\n</ul>\n<h2 id=\"路由器的两种工作模式\"><a href=\"#路由器的两种工作模式\" class=\"headerlink\" title=\"路由器的两种工作模式\"></a>路由器的两种工作模式</h2><ul>\n<li>hash模式 <ol>\n<li>地址中的永远带的#号，不美观</li>\n<li>若以后将地址通过第三方手机app分享，若app的校验严格，则地址会被标记为不合法</li>\n<li>兼容性好 </li>\n</ol>\n</li>\n<li>history模式<ol>\n<li>地址干净美观</li>\n<li>兼容性和hash模式相比略差</li>\n<li>应用部署上线时需要后端人员支持，解决刷新页面服务端的404的问题</li>\n<li>解决以上问题使用 <code>connect-history-api-fallback</code> npm包</li>\n</ol>\n</li>\n</ul>\n","categories":[{"name":"vue","path":"api/categories/vue.json"}],"tags":[]}