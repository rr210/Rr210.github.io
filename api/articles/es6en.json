{"title":"ES6模块化-promise-高级用法","slug":"es6en","date":"2021-09-11T16:00:00.000Z","updated":"2022-07-29T12:13:08.727Z","comments":true,"path":"api/articles/es6en.json","excerpt":null,"covers":null,"content":"<h2 id=\"前端模块化规范\"><a href=\"#前端模块化规范\" class=\"headerlink\" title=\"前端模块化规范\"></a>前端模块化规范</h2><ul>\n<li><code>AMD</code> <code>CMD</code> <code>CommonJS</code></li>\n<li>ES6模块化规范取代之前的非标准语法, 导入使用<code>import</code> 共享使用<code>export</code></li>\n<li>配置package.json 加入  <code>type:&quot;module&quot;</code></li>\n</ul>\n<h2 id=\"es6模块化三种用法\"><a href=\"#es6模块化三种用法\" class=\"headerlink\" title=\"es6模块化三种用法\"></a>es6模块化三种用法</h2><h3 id=\"默认导出-默认导入\"><a href=\"#默认导出-默认导入\" class=\"headerlink\" title=\"默认导出, 默认导入\"></a>默认导出, 默认导入</h3><ul>\n<li>默认导出</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> n1 = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> n2 = <span class=\"number\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  n1,</span><br><span class=\"line\">  show</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>默认导入</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> m1 <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./index.js&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(m1);</span><br></pre></td></tr></table></figure>\n<h3 id=\"按需导出导入\"><a href=\"#按需导出导入\" class=\"headerlink\" title=\"按需导出导入\"></a>按需导出导入</h3><ul>\n<li>名称保持一致</li>\n<li>可以使用 <code>as</code> 重新命名</li>\n<li>可以和默认导出配合使用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按需导出</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> n1 = <span class=\"string\">&#x27;aaa&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> n2 = <span class=\"string\">&#x27;vcv&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">20</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按需导入,info 表示默认导出</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> info, &#123;</span><br><span class=\"line\">  n1</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./index.js&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n1);</span><br></pre></td></tr></table></figure>\n<h3 id=\"直接导入\"><a href=\"#直接导入\" class=\"headerlink\" title=\"直接导入\"></a>直接导入</h3><ul>\n<li>直接使用import, 直接导入执行模块中的代码</li>\n</ul>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><ul>\n<li>解决回调地狱的问题, 构造函数</li>\n<li>使用promise读取文件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> thenfs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;then-fs&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">thenfs.readFile(<span class=\"string\">&#x27;./1.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> thenfs.readFile(<span class=\"string\">&#x27;./2.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> thenfs.readFile(<span class=\"string\">&#x27;./3.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用.catch 捕获错误 如果放到最后, 前面如果发生错误, 无法执行其他正确的程序; </li>\n</ul>\n<h3 id=\"使用promise-all方法\"><a href=\"#使用promise-all方法\" class=\"headerlink\" title=\"使用promise.all方法\"></a>使用promise.all方法</h3><ul>\n<li>等待所有的异步操作完成后执行</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> thenfs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;then-fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> promiseArr = [</span><br><span class=\"line\">  thenfs.readFile(<span class=\"string\">&#x27;./1.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>),</span><br><span class=\"line\">  thenfs.readFile(<span class=\"string\">&#x27;./2.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>),</span><br><span class=\"line\">  thenfs.readFile(<span class=\"string\">&#x27;./3.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>),</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all(promiseArr).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用promise-race方法\"><a href=\"#使用promise-race方法\" class=\"headerlink\" title=\"使用promise.race方法\"></a>使用promise.race方法</h3><ul>\n<li>返回执行速度最快的promise</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> thenfs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;then-fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> promiseArr = [</span><br><span class=\"line\">  thenfs.readFile(<span class=\"string\">&#x27;./1.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>),</span><br><span class=\"line\">  thenfs.readFile(<span class=\"string\">&#x27;./2.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>),</span><br><span class=\"line\">  thenfs.readFile(<span class=\"string\">&#x27;./3.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>),</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race(promiseArr).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建异步操作\"><a href=\"#创建异步操作\" class=\"headerlink\" title=\"创建异步操作\"></a>创建异步操作</h3><ul>\n<li>失败的回调函数可以省略不写, 使用.catch来捕获</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFile</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    fs.readFile(fpath, <span class=\"string\">&#x27;utf8&#x27;</span>, <span class=\"function\">(<span class=\"params\">err, datastr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> reject(err)</span><br><span class=\"line\">      resolve(datastr)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getFile(<span class=\"string\">&#x27;./111.txt&#x27;</span>).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err.message);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用async-await获取返回值\"><a href=\"#使用async-await获取返回值\" class=\"headerlink\" title=\"使用async/await获取返回值\"></a>使用async/await获取返回值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getfile</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"keyword\">await</span> thenfs.readFile(<span class=\"string\">&#x27;./1.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getfile()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意事项</li>\n<li>使用await必须使用async来修饰</li>\n<li>在await第一次出现之前的代码都是同步执行, 之后的都是等待异步执行完成后执行</li>\n</ul>\n<h2 id=\"同步任务和异步任务\"><a href=\"#同步任务和异步任务\" class=\"headerlink\" title=\"同步任务和异步任务\"></a>同步任务和异步任务</h2><h2 id=\"EventLoop\"><a href=\"#EventLoop\" class=\"headerlink\" title=\"EventLoop\"></a>EventLoop</h2><h2 id=\"宏任务-微任务\"><a href=\"#宏任务-微任务\" class=\"headerlink\" title=\"宏任务 微任务\"></a>宏任务 微任务</h2><ul>\n<li>宏任务</li>\n</ul>\n<ol>\n<li>异步Ajax请求</li>\n<li>setTimeout,setInterval</li>\n<li>文件操作</li>\n<li>其他宏任务</li>\n</ol>\n<ul>\n<li>微任务</li>\n</ul>\n<ol>\n<li>Promise.then .catch,.finally</li>\n<li>process.nextTick</li>\n<li>其他微任务</li>\n</ol>\n<ul>\n<li>每一个宏任务执行完之后, 都会进行一次判断微任务队列中是否存在未执行的微任务, 如果存在微任务 需要将所有的微任务执行完成后在继续执行下一个宏任务</li>\n</ul>\n<h2 id=\"try-catch-捕获错误\"><a href=\"#try-catch-捕获错误\" class=\"headerlink\" title=\"try catch 捕获错误\"></a>try catch 捕获错误</h2><ul>\n<li>使用try catch 来捕获错误, 并且在catch中进行处理</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> db <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../db/index.js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAlluser</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [rows] = <span class=\"keyword\">await</span> db.query(<span class=\"string\">&#x27;select age,username from ev_users&#x27;</span>)</span><br><span class=\"line\">    res.send(&#123;</span><br><span class=\"line\">      status: <span class=\"number\">200</span>,</span><br><span class=\"line\">      data: rows,</span><br><span class=\"line\">      message: <span class=\"string\">&#x27;数据获取成功&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    res.send(&#123;</span><br><span class=\"line\">      status: -<span class=\"number\">1</span>,</span><br><span class=\"line\">      message: <span class=\"string\">&#x27;请求出错&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"前端模块化规范\"><a href=\"#前端模块化规范\" class=\"headerlink\" title=\"前端模块化规范\"></a>前端模块化规范</h2><ul>\n<li><code>AMD</code> <code>CMD</code> <code>CommonJS</code></li>\n<li>ES6模块化规范取代之前的非标准语法, 导入使用<code>import</code> 共享使用<code>export</code></li>\n<li>配置package.json 加入  <code>type:&quot;module&quot;</code></li>\n</ul>\n<h2 id=\"es6模块化三种用法\"><a href=\"#es6模块化三种用法\" class=\"headerlink\" title=\"es6模块化三种用法\"></a>es6模块化三种用法</h2><h3 id=\"默认导出-默认导入\"><a href=\"#默认导出-默认导入\" class=\"headerlink\" title=\"默认导出, 默认导入\"></a>默认导出, 默认导入</h3><ul>\n<li>默认导出</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> n1 = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> n2 = <span class=\"number\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  n1,</span><br><span class=\"line\">  show</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>默认导入</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> m1 <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./index.js&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(m1);</span><br></pre></td></tr></table></figure>\n<h3 id=\"按需导出导入\"><a href=\"#按需导出导入\" class=\"headerlink\" title=\"按需导出导入\"></a>按需导出导入</h3><ul>\n<li>名称保持一致</li>\n<li>可以使用 <code>as</code> 重新命名</li>\n<li>可以和默认导出配合使用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按需导出</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> n1 = <span class=\"string\">&#x27;aaa&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> n2 = <span class=\"string\">&#x27;vcv&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">20</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按需导入,info 表示默认导出</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> info, &#123;</span><br><span class=\"line\">  n1</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./index.js&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n1);</span><br></pre></td></tr></table></figure>\n<h3 id=\"直接导入\"><a href=\"#直接导入\" class=\"headerlink\" title=\"直接导入\"></a>直接导入</h3><ul>\n<li>直接使用import, 直接导入执行模块中的代码</li>\n</ul>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><ul>\n<li>解决回调地狱的问题, 构造函数</li>\n<li>使用promise读取文件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> thenfs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;then-fs&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">thenfs.readFile(<span class=\"string\">&#x27;./1.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> thenfs.readFile(<span class=\"string\">&#x27;./2.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> thenfs.readFile(<span class=\"string\">&#x27;./3.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用.catch 捕获错误 如果放到最后, 前面如果发生错误, 无法执行其他正确的程序; </li>\n</ul>\n<h3 id=\"使用promise-all方法\"><a href=\"#使用promise-all方法\" class=\"headerlink\" title=\"使用promise.all方法\"></a>使用promise.all方法</h3><ul>\n<li>等待所有的异步操作完成后执行</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> thenfs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;then-fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> promiseArr = [</span><br><span class=\"line\">  thenfs.readFile(<span class=\"string\">&#x27;./1.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>),</span><br><span class=\"line\">  thenfs.readFile(<span class=\"string\">&#x27;./2.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>),</span><br><span class=\"line\">  thenfs.readFile(<span class=\"string\">&#x27;./3.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>),</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all(promiseArr).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用promise-race方法\"><a href=\"#使用promise-race方法\" class=\"headerlink\" title=\"使用promise.race方法\"></a>使用promise.race方法</h3><ul>\n<li>返回执行速度最快的promise</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> thenfs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;then-fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> promiseArr = [</span><br><span class=\"line\">  thenfs.readFile(<span class=\"string\">&#x27;./1.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>),</span><br><span class=\"line\">  thenfs.readFile(<span class=\"string\">&#x27;./2.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>),</span><br><span class=\"line\">  thenfs.readFile(<span class=\"string\">&#x27;./3.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>),</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race(promiseArr).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建异步操作\"><a href=\"#创建异步操作\" class=\"headerlink\" title=\"创建异步操作\"></a>创建异步操作</h3><ul>\n<li>失败的回调函数可以省略不写, 使用.catch来捕获</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFile</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    fs.readFile(fpath, <span class=\"string\">&#x27;utf8&#x27;</span>, <span class=\"function\">(<span class=\"params\">err, datastr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> reject(err)</span><br><span class=\"line\">      resolve(datastr)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getFile(<span class=\"string\">&#x27;./111.txt&#x27;</span>).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err.message);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用async-await获取返回值\"><a href=\"#使用async-await获取返回值\" class=\"headerlink\" title=\"使用async/await获取返回值\"></a>使用async/await获取返回值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getfile</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"keyword\">await</span> thenfs.readFile(<span class=\"string\">&#x27;./1.txt&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getfile()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意事项</li>\n<li>使用await必须使用async来修饰</li>\n<li>在await第一次出现之前的代码都是同步执行, 之后的都是等待异步执行完成后执行</li>\n</ul>\n<h2 id=\"同步任务和异步任务\"><a href=\"#同步任务和异步任务\" class=\"headerlink\" title=\"同步任务和异步任务\"></a>同步任务和异步任务</h2><h2 id=\"EventLoop\"><a href=\"#EventLoop\" class=\"headerlink\" title=\"EventLoop\"></a>EventLoop</h2><h2 id=\"宏任务-微任务\"><a href=\"#宏任务-微任务\" class=\"headerlink\" title=\"宏任务 微任务\"></a>宏任务 微任务</h2><ul>\n<li>宏任务</li>\n</ul>\n<ol>\n<li>异步Ajax请求</li>\n<li>setTimeout,setInterval</li>\n<li>文件操作</li>\n<li>其他宏任务</li>\n</ol>\n<ul>\n<li>微任务</li>\n</ul>\n<ol>\n<li>Promise.then .catch,.finally</li>\n<li>process.nextTick</li>\n<li>其他微任务</li>\n</ol>\n<ul>\n<li>每一个宏任务执行完之后, 都会进行一次判断微任务队列中是否存在未执行的微任务, 如果存在微任务 需要将所有的微任务执行完成后在继续执行下一个宏任务</li>\n</ul>\n<h2 id=\"try-catch-捕获错误\"><a href=\"#try-catch-捕获错误\" class=\"headerlink\" title=\"try catch 捕获错误\"></a>try catch 捕获错误</h2><ul>\n<li>使用try catch 来捕获错误, 并且在catch中进行处理</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> db <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../db/index.js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAlluser</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [rows] = <span class=\"keyword\">await</span> db.query(<span class=\"string\">&#x27;select age,username from ev_users&#x27;</span>)</span><br><span class=\"line\">    res.send(&#123;</span><br><span class=\"line\">      status: <span class=\"number\">200</span>,</span><br><span class=\"line\">      data: rows,</span><br><span class=\"line\">      message: <span class=\"string\">&#x27;数据获取成功&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    res.send(&#123;</span><br><span class=\"line\">      status: -<span class=\"number\">1</span>,</span><br><span class=\"line\">      message: <span class=\"string\">&#x27;请求出错&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":[{"name":"JavaScript","path":"api/categories/JavaScript.json"}],"tags":[]}