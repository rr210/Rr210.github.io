{"title":"回顾面试题","slug":"interview","date":"2022-07-01T10:14:27.000Z","updated":"2022-07-28T12:50:57.646Z","comments":true,"path":"api/articles/interview.json","excerpt":null,"covers":["https://cloud.mr90.top/hexo/5/580241e3-67af-4e14-894d-dde6cceca330.png"],"content":"<h2 id=\"this指向问题\"><a href=\"#this指向问题\" class=\"headerlink\" title=\"this指向问题\"></a>this指向问题</h2><h3 id=\"题1\"><a href=\"#题1\" class=\"headerlink\" title=\"题1\"></a>题1</h3><iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"this指向问题1\" src=\"https://codepen.io/rr210/embed/WNzjrWK?default-tab=html%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/rr210/pen/WNzjrWK\">\n  this指向问题1</a> by Harry (<a href=\"https://codepen.io/rr210\">@rr210</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n\n<h3 id=\"题2\"><a href=\"#题2\" class=\"headerlink\" title=\"题2\"></a>题2</h3><iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"this 2\" src=\"https://codepen.io/rr210/embed/LYdyNJz?default-tab=js%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/rr210/pen/LYdyNJz\">\n  this 2</a> by Harry (<a href=\"https://codepen.io/rr210\">@rr210</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n\n<h3 id=\"题3\"><a href=\"#题3\" class=\"headerlink\" title=\"题3\"></a>题3</h3><iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"Untitled\" src=\"https://codepen.io/rr210/embed/QWmvNZe?default-tab=js%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/rr210/pen/QWmvNZe\">\n  Untitled</a> by Harry (<a href=\"https://codepen.io/rr210\">@rr210</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n\n<h3 id=\"题4\"><a href=\"#题4\" class=\"headerlink\" title=\"题4\"></a>题4</h3><iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"this4\" src=\"https://codepen.io/rr210/embed/abYWNPW?default-tab=js%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/rr210/pen/abYWNPW\">\n  this4</a> by Harry (<a href=\"https://codepen.io/rr210\">@rr210</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n\n<h2 id=\"css面试题\"><a href=\"#css面试题\" class=\"headerlink\" title=\"css面试题\"></a>css面试题</h2><ol>\n<li>BFC(块级格式化上下文，用于清除浮动，防止margin重叠) 独立的容器</li>\n<li>BFC的生成</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float 不为none的元素</span><br><span class=\"line\">position为fixed和absolute的元素</span><br><span class=\"line\">display为inline-block,table-cell,talbe-caption,flex,inline-flex的元素</span><br><span class=\"line\">overflow不为visible的元素</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>常见的块元素有<code>&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;</code>等，其中<code>&lt;div&gt;</code>标签是最典型的块元素。</li>\n<li>常见的行内元素有<code>&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;</code>等，其中<code>&lt;span&gt;</code>标签最典型的行内元素。有的地方也成内联元素</li>\n<li>在行内元素中有几个特殊的标签——<code>&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;</code>，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。</li>\n<li>H5语义化元素：header,nav,main,article,section,aside,footer,small,strong</li>\n</ol>\n<ul>\n<li><a href=\"https://juejin.cn/post/6998925491797229599\">CSS中 块级元素、行内元素、行内块元素区别</a></li>\n</ul>\n<h2 id=\"基础面试题\"><a href=\"#基础面试题\" class=\"headerlink\" title=\"基础面试题\"></a>基础面试题</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给定后转换成指定的输出形式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> csv = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">name, age, parent</span></span><br><span class=\"line\"><span class=\"string\">Bob, 36, David,</span></span><br><span class=\"line\"><span class=\"string\">David, 60,</span></span><br><span class=\"line\"><span class=\"string\">Anni, 10, Bob</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">csvTran</span>(<span class=\"params\">t</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a = t.split(<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> b = a.splice(<span class=\"number\">1</span>, a.length - <span class=\"number\">2</span>).map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v.replace(<span class=\"regexp\">/\\s/g</span>, <span class=\"string\">&#x27;&#x27;</span>).split(<span class=\"string\">&#x27;,&#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">const</span> d = b.slice(<span class=\"number\">1</span>, b.length)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> d) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> g = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> f <span class=\"keyword\">in</span> i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> h = b[<span class=\"number\">0</span>][f]</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(h)&#123;</span><br><span class=\"line\">            g[h] = i[f]</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        list.push(g)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(list)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">csvTran(csv)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>给定一个正偶数，算出他有几种方式拆分成两个素数相加的形式</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"comment\">// 寻找所有的素数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AddList</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> flag = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> m = <span class=\"number\">2</span>; m &lt; i; m++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(m)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i % m === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                flag = <span class=\"literal\">false</span></span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(m)</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">            res.push(i)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 相加计算</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countAdd</span>(<span class=\"params\">list, num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> r = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; list.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; list.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (list[i] + list[j] === num) &#123;</span><br><span class=\"line\">                r.push([[list[i], list[j]]])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(r)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> l = AddList(a)</span><br><span class=\"line\">countAdd(l, a)</span><br></pre></td></tr></table></figure>\n<h2 id=\"面试题问答\"><a href=\"#面试题问答\" class=\"headerlink\" title=\"面试题问答\"></a>面试题问答</h2><h3 id=\"微信小程序是如何实现登录的\"><a href=\"#微信小程序是如何实现登录的\" class=\"headerlink\" title=\"微信小程序是如何实现登录的\"></a>微信小程序是如何实现登录的</h3><ul>\n<li>首先需要一个按钮来触发事件</li>\n<li>调用微信小程序的登录接口<code>wx.login</code>,拿到code</li>\n<li>调用微信小程序的获取用户的接口<code>wx.getUserProfile</code>拿到个人信息</li>\n<li>拿到个人信息后调用后台的接口，将个人信息在传入到后台，登录后将相关的信息缓冲在本地存储中，方便后续的开发使用</li>\n</ul>\n<h3 id=\"闭包的概念-作用-应用及缺点\"><a href=\"#闭包的概念-作用-应用及缺点\" class=\"headerlink\" title=\"闭包的概念,作用,应用及缺点\"></a>闭包的概念,作用,应用及缺点</h3><ul>\n<li>概念：函数嵌套函数，内部函数就是闭包；能够读取其他函数内部变量的函数</li>\n<li>作用：可以读取函数内部的变量；可以使变量的值始终在内存中，不会被垃圾回收机制回收；可以避免使用全局变量，防止全局变量污染</li>\n<li>应用：for循环中的保留i的操作；防抖和节流；函数柯里化</li>\n<li>缺点：容易引起内存泄漏</li>\n</ul>\n<h3 id=\"原型和原型链\"><a href=\"#原型和原型链\" class=\"headerlink\" title=\"原型和原型链\"></a>原型和原型链</h3><ul>\n<li>原型：每个函数上都有prototype属性，该属性指向原型对象；使用原型对象的好处就是所有的实例共享它所包含的属性和方法</li>\n<li>原型链：每个对象上都有一个原型对象，通过__proto__指针指向其原型对象，并从中继承方法和属性，同时原型对象也可能拥有原型，最终指向null</li>\n</ul>\n<p><img src=\"https://cloud.mr90.top/hexo/5/580241e3-67af-4e14-894d-dde6cceca330.png\"></p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ol>\n<li>实现继承共有6种方法，有：原型链继承，构造函数继承，组合式继承（原型链+构造函数），原型继承，寄生式继承，寄生组合式继承</li>\n<li>这几种方法 每种方法都有各自的特点<ul>\n<li>原型链继承他会将子函数原型指向要继承的函数实例，这样会造成共用一个原型对象，当一个实例发生变化，另一个也随之跟着变化</li>\n<li>构造函数继承 只能继承父类的实例的属性和方法，不能继承父类原型的属性和方法</li>\n<li>组合式继承 原型链和构造函数继承结合 会导致 在执行两次构造函数，影响性能；并且这里的constructor可进行遍历(应该禁用)</li>\n<li>原型式继承 使用es5中的方法Object.create方法 创建一个空的对象，将新对象的原型指向对象</li>\n<li>寄生式继承 在原型式继承的基础上，在父类的方法上添加了一些方法</li>\n<li>寄生组合式继承 使用工厂函数进行封装处理 使用es5中的Object.defineProperty方法对函数原型（实例原型）的constructor的值进行配置enumerable为false</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"原型链继承\"><a href=\"#原型链继承\" class=\"headerlink\" title=\"原型链继承\"></a>原型链继承</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;parent1&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.type = <span class=\"string\">&#x27;child2&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child1.prototype = <span class=\"keyword\">new</span> Parent1();</span><br><span class=\"line\"><span class=\"keyword\">const</span> s1 = <span class=\"keyword\">new</span> Child1()</span><br><span class=\"line\">s1.play.push(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> s2 = <span class=\"keyword\">new</span> Child1()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s1.play) <span class=\"comment\">// [1,2,3,4]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s2.play) <span class=\"comment\">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>缺点：实现数据共享，当其中一个实例发生改变 另一个也随之跟着改变</li>\n</ul>\n<h4 id=\"构造函数方法-call方法\"><a href=\"#构造函数方法-call方法\" class=\"headerlink\" title=\"构造函数方法(call方法)\"></a>构造函数方法(call方法)</h4><ul>\n<li>缺点：只能继承父类的实例的属性和方法，但是不能继承父类原型的属性和方法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;parent1&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">Parent1.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  Parent1.call(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.type = <span class=\"string\">&#x27;child1&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">let</span> child = <span class=\"keyword\">new</span> Child1();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child);  <span class=\"comment\">// 没问题</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.getName());  <span class=\"comment\">// 会报错</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"组合继承-前两种方法\"><a href=\"#组合继承-前两种方法\" class=\"headerlink\" title=\"组合继承(前两种方法)\"></a>组合继承(前两种方法)</h4><ul>\n<li>缺点：多执行了一次构造函数,并且这里的constructor可进行遍历</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent3</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;parent3&#x27;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">Parent3.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 第二次调用 Parent3()</span></span><br><span class=\"line\">  Parent3.call(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.type = <span class=\"string\">&#x27;child3&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 第一次调用 Parent3()</span></span><br><span class=\"line\">Child3.prototype = <span class=\"keyword\">new</span> Parent3();</span><br><span class=\"line\"><span class=\"comment\">// 手动挂上构造器，指向自己的构造函数</span></span><br><span class=\"line\">Child3.prototype.constructor = Child3;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"keyword\">new</span> Child3();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s4 = <span class=\"keyword\">new</span> Child3();</span><br><span class=\"line\">s3.play.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s3.play, s4.play);  <span class=\"comment\">// 不互相影响</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s3.getName()); <span class=\"comment\">// 正常输出&#x27;parent3&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s4.getName()); <span class=\"comment\">// 正常输出&#x27;parent3&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h4><ul>\n<li>使用Object.create方法来实现，多个实例的引用类型属性指向相同的内存，存在篡改的可能  与原型链继承类似</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> parent4 = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&quot;parent4&quot;</span>,</span><br><span class=\"line\">  friends: [<span class=\"string\">&quot;p1&quot;</span>, <span class=\"string\">&quot;p2&quot;</span>, <span class=\"string\">&quot;p3&quot;</span>],</span><br><span class=\"line\">  getName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">let</span> person4 = <span class=\"built_in\">Object</span>.create(parent4);</span><br><span class=\"line\">person4.name = <span class=\"string\">&quot;tom&quot;</span>;</span><br><span class=\"line\">person4.friends.push(<span class=\"string\">&quot;jerry&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> person5 = <span class=\"built_in\">Object</span>.create(parent4);</span><br><span class=\"line\">person5.friends.push(<span class=\"string\">&quot;lucy&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person4.name);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person4.name === person4.getName());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person5.name);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person4.friends);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person5.friends);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">let</span> parent5 = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&quot;parent5&quot;</span>,</span><br><span class=\"line\">  friends: [<span class=\"string\">&quot;p1&quot;</span>, <span class=\"string\">&quot;p2&quot;</span>, <span class=\"string\">&quot;p3&quot;</span>],</span><br><span class=\"line\">  getName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">original</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> clone = <span class=\"built_in\">Object</span>.create(original);</span><br><span class=\"line\">  clone.getFriends = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.friends</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> clone;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">let</span> person5 = clone(parent5);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person5.getName());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person5.getFriends());</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span> (<span class=\"params\">parent, child</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这里改用 Object.create 就可以减少组合继承中多进行一次构造的过程</span></span><br><span class=\"line\">  child.prototype = <span class=\"built_in\">Object</span>.create(parent.prototype);</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(child.prototype,<span class=\"string\">&#x27;constructor&#x27;</span>,&#123;</span><br><span class=\"line\">      value:child,</span><br><span class=\"line\">      enumerable:<span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent6</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;parent6&#x27;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> Parent6.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child6</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  Parent6.call(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.friends = <span class=\"string\">&#x27;child5&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">clone(Parent6, Child6);</span><br><span class=\"line\"> </span><br><span class=\"line\">Child6.prototype.getFriends = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.friends;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">let</span> person6 = <span class=\"keyword\">new</span> Child6();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person6);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person6.getName());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person6.getFriends());</span><br></pre></td></tr></table></figure>\n<h3 id=\"节流和防抖\"><a href=\"#节流和防抖\" class=\"headerlink\" title=\"节流和防抖\"></a>节流和防抖</h3><ol>\n<li>防抖就是在某一时间内快速执行事件，然后仅最后一次事件执行</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dedounce = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn, delay</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            fn.call(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">        &#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>节流控制执行次数,在某段时间内如果执行多次，将仅仅执行一次</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn,delay</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!timer)&#123;</span><br><span class=\"line\">               timer= <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">                fn.call(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">                timer = <span class=\"literal\">null</span></span><br><span class=\"line\">            &#125;,delay)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"apply，call，bind方法\"><a href=\"#apply，call，bind方法\" class=\"headerlink\" title=\"apply，call，bind方法\"></a>apply，call，bind方法</h3><ul>\n<li>都是用来改变this指向问题的</li>\n<li>apply,call是立即执行，bind返回一个函数</li>\n</ul>\n<h4 id=\"手写实现一个apply\"><a href=\"#手写实现一个apply\" class=\"headerlink\" title=\"手写实现一个apply\"></a>手写实现一个apply</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype._apply = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context, arg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arg)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span> !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&#x27;类型传入错误&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个唯一的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = <span class=\"built_in\">Symbol</span>()</span><br><span class=\"line\">    context[key] = <span class=\"built_in\">this</span></span><br><span class=\"line\">    result = context[key](arg)</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context[key]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&quot;zs&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">arg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = arg[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn._apply(obj, [<span class=\"string\">&#x27;zs&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<h4 id=\"手写实现一个call\"><a href=\"#手写实现一个call\" class=\"headerlink\" title=\"手写实现一个call\"></a>手写实现一个call</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype._call = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context, ...arg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arg)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span> !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&#x27;类型传入错误&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个唯一的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = <span class=\"built_in\">Symbol</span>()</span><br><span class=\"line\">    context[key] = <span class=\"built_in\">this</span></span><br><span class=\"line\">    result = context[key](...arg)</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context[key]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&quot;zs&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn._call(obj, <span class=\"string\">&#x27;zs&#x27;</span>, <span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"手写实现一个bind\"><a href=\"#手写实现一个bind\" class=\"headerlink\" title=\"手写实现一个bind\"></a>手写实现一个bind</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype._bind = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span> !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&#x27;Error&#x27;</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> self = <span class=\"built_in\">this</span></span><br><span class=\"line\">     <span class=\"keyword\">let</span> context = args.shift()  <span class=\"comment\">//shift 方法是将数组中的第一个数删除，然后然后返回删除的数</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...arg</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> self.apply(context, args[<span class=\"number\">0</span>].concat([...arg]))</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">...arg</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">this</span>.a = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a:&#x27;</span> + <span class=\"built_in\">this</span>.a);</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;name:&#x27;</span> + <span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">     name: <span class=\"string\">&#x27;zs&#x27;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(fn._bind(obj, [<span class=\"string\">&#x27;apply&#x27;</span>, <span class=\"string\">&#x27;0&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>])(<span class=\"number\">1</span>, <span class=\"number\">3</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"ajax实现过程\"><a href=\"#ajax实现过程\" class=\"headerlink\" title=\"ajax实现过程\"></a>ajax实现过程</h3><ol>\n<li>创建一个XMLHttpRequest对象</li>\n<li>在创建好的对象下使用<code>open</code>方法，创建一个http请求</li>\n<li>并且设置请求头的信息，比如<code>content-type</code></li>\n<li>设置响应http请求状态变化的函数<code>onreadstatechange</code></li>\n<li>发送http请求，使用send方法</li>\n<li>获取异步调用时返回的结果</li>\n</ol>\n<ul>\n<li>状态码 0-4 分别表示 未初始化状态，初始化状态，发送请求时的状态，接受请求时的状态，完成时的状态</li>\n</ul>\n<h3 id=\"axios实现原理\"><a href=\"#axios实现原理\" class=\"headerlink\" title=\"axios实现原理\"></a>axios实现原理</h3><ol>\n<li>它是一个基于Promise的http库，可以在浏览器和node.js中使用</li>\n<li>从浏览器中创建XMLhttpRequest 从node.js创建一个http请求</li>\n<li>支持promise API</li>\n<li>可以转换请求数据和响应数据，并对响应的内容自动转换为json类型的数据</li>\n<li>取消请求，request.abort</li>\n<li>客户端支持防御XSRF（跨站请求伪造）</li>\n</ol>\n<h3 id=\"浅拷贝和深拷贝\"><a href=\"#浅拷贝和深拷贝\" class=\"headerlink\" title=\"浅拷贝和深拷贝\"></a>浅拷贝和深拷贝</h3><ol>\n<li>深拷贝是指：开辟了一个新的空间，然后将对象指向该地址，并且与原来的对象互不干扰</li>\n<li>浅拷贝是指：比较浅的拷贝，他与原来的变量还是指向同一个地址，两者之间相互影响</li>\n</ol>\n<ul>\n<li>原始类型：String,Null,undefined,boolean,number,symbol</li>\n<li>引用类型：Object,function,Array</li>\n</ul>\n<p>实现浅拷贝的方法：</p>\n<ul>\n<li>针对引用数据类型 使用for in的方法实现</li>\n</ul>\n<p>实现深拷贝的方法</p>\n<ul>\n<li>使用<code>for..in..</code> + <code>递归</code>的方式实现</li>\n<li>使用<code>JSON.parse(JSON.stringify(对象))</code>实现深拷贝</li>\n</ul>\n<h3 id=\"箭头函数和普通函数的区别\"><a href=\"#箭头函数和普通函数的区别\" class=\"headerlink\" title=\"箭头函数和普通函数的区别\"></a>箭头函数和普通函数的区别</h3><ol>\n<li>外形也不同箭头函数使用箭头定义</li>\n<li>箭头函数全是匿名函数；普通函数可以有匿名函数也可以有具名函数</li>\n<li>箭头函数没有this，它的this指向上层作用域;普通函数的this指向调用它的对象，如果用作构造函数，则指向它的实例</li>\n<li>箭头函数没有arguments；普通函数每一个都具有arguments，用来存储实际传递的参数；</li>\n<li>箭头函数没有prototype属性</li>\n<li>箭头函数不能使用new 来构造函数</li>\n</ol>\n<h3 id=\"跨域的解决方法\"><a href=\"#跨域的解决方法\" class=\"headerlink\" title=\"跨域的解决方法\"></a>跨域的解决方法</h3><ol>\n<li>使用<code>jsonp</code>解决，缺陷只能进行get请求，实现原理就是创建一个script元素，将请求的参数赋值给src然后配合后端，数据通过函数执行传参的方式实现数据传递</li>\n<li>使用 <code>document.domain + iframe</code> 实现</li>\n<li>使用 <code>window.name + iframe</code> 来实现</li>\n<li>使用nginx 配置 “<code>assess-control-allow-origin</code>“ 设置跨域资源共享</li>\n<li>使用<code>location.hash + iframe</code> 来实现</li>\n<li>使用<code>webSockets</code>来实现</li>\n<li>使用<code>window.postMessage</code> 来实现</li>\n</ol>\n<h3 id=\"什么是柯里化，手写实现\"><a href=\"#什么是柯里化，手写实现\" class=\"headerlink\" title=\"什么是柯里化，手写实现\"></a>什么是柯里化，手写实现</h3><ul>\n<li>把多参数的函数，转换为单参数的函数（参数复用，闭包原理）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">currying</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"built_in\">Array</span>.prototype.slice(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> <span class=\"built_in\">arguments</span>) &#123; args.push(i) &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.toString = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> args.reduce(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(currying(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>).toString());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"什么是事件监听、事件委托\"><a href=\"#什么是事件监听、事件委托\" class=\"headerlink\" title=\"什么是事件监听、事件委托\"></a>什么是事件监听、事件委托</h3><ol>\n<li>事件委托：将子元素要执行的响应事件，绑定到父元素上，让父元素去代替监听动作；原理是事件冒泡</li>\n<li>事件捕获和事件冒泡的执行顺序：先捕获后冒泡</li>\n<li>事件监听 使用 <code>addEventListener</code> 实现</li>\n</ol>\n<h3 id=\"什么是Event-LOOP-事件循环\"><a href=\"#什么是Event-LOOP-事件循环\" class=\"headerlink\" title=\"什么是Event LOOP(事件循环)\"></a>什么是Event LOOP(事件循环)</h3><ol>\n<li>事件循环是javascript的执行机制（先同步后异步，异步先微任务后宏任务）</li>\n<li>常见的宏任务：整段代码script,setTimeout,setInterval</li>\n<li>常见的微任务：promise,process.nextTick()</li>\n</ol>\n<h3 id=\"垂直局中的几种实现方法\"><a href=\"#垂直局中的几种实现方法\" class=\"headerlink\" title=\"垂直局中的几种实现方法\"></a>垂直局中的几种实现方法</h3><ol>\n<li>使用flex方法<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.name</span> &#123;</span></span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\">        height: 100px;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#a71111</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    body&#123;</span><br><span class=\"line\">        margin: 0;</span><br><span class=\"line\">        height: 100vh;</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        justify-content: center;</span><br><span class=\"line\">        align-items: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>定位实现<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.name</span> &#123;</span></span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\">        height: 100px;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#a71111</span>;</span></span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        top: 0;</span><br><span class=\"line\">        left: 0;</span><br><span class=\"line\">        right: 0;</span><br><span class=\"line\">        bottom: 0;</span><br><span class=\"line\">        margin: auto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    body&#123;</span><br><span class=\"line\">        margin: 0;</span><br><span class=\"line\">        height: 100vh;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>定位实现+transform</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.name</span> &#123;</span></span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\">        height: 100px;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#a71111</span>;</span></span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        top: 50%;</span><br><span class=\"line\">        left: 50%;</span><br><span class=\"line\">        transform: translate(-50%, -50%);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">        position: relative;</span><br><span class=\"line\">        margin: 0;</span><br><span class=\"line\">        height: 100vh;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用定位+margin方法实现</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.name</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: -<span class=\"number\">50px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> -<span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>使用text-align+line-height</p>\n</li>\n<li><p>使用grid方法</p>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100vh</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">    <span class=\"attribute\">place-items</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>定位+calc方法</li>\n</ul>\n<h3 id=\"get，post的区别\"><a href=\"#get，post的区别\" class=\"headerlink\" title=\"get，post的区别\"></a>get，post的区别</h3><ol>\n<li>get一般用来向服务器获取数据，而post则是向服务器发送数据</li>\n<li>get请求的时候是将请求的信息都暴露在url上，而post是将数据都放到body中</li>\n<li>get地址可以被缓冲，而post不能</li>\n<li>get请求长度是有限制的，而post请求的长度是没有限制的</li>\n</ol>\n<h3 id=\"localstorage-sessionStorage-cookie的区别\"><a href=\"#localstorage-sessionStorage-cookie的区别\" class=\"headerlink\" title=\"localstorage,sessionStorage,cookie的区别\"></a>localstorage,sessionStorage,cookie的区别</h3><ul>\n<li>它们都是存储到客户端</li>\n</ul>\n<ol>\n<li>cookie数据始终在同源的http请求中携带(即使不需要), 即cookie在浏览器和服务器间来回传递, 而sessionStorage和localStorage不会自动把数据发送给服务器, 仅在本地保存.cookie数据还有路径(path)的概念, 可以限制cookie只属于某个路径下</li>\n<li>存储大小限制也不同, cookie数据不能超过4K, 同时因为每次http请求都会携带cookie、所以cookie只适合保存很小的数据, 如会话标识.sessionStorage和localStorage虽然也有存储大小的限制, 但比cookie大得多, 可以达到5M或更大</li>\n<li>数据有效期不同, sessionStorage: 仅在当前浏览器窗口关闭之前有效; localStorage: 始终有效, 窗口或浏览器关闭也一直保存, 因此用作持久数据; cookie: 只在设置的cookie过期时间之前有效, 即使窗口关闭或浏览器关闭</li>\n<li>作用域不同, sessionStorage不在不同的浏览器窗口中共享, 即使是同一个页面; localstorage在所有同源窗口中都是共享的; cookie也是在所有同源窗口中都是共享的</li>\n</ol>\n<h3 id=\"UDP和TCP的区别\"><a href=\"#UDP和TCP的区别\" class=\"headerlink\" title=\"UDP和TCP的区别\"></a>UDP和TCP的区别</h3><ul>\n<li>tcp是面向连接的（需要进行三次握手和四次挥手），udp是面向无连接</li>\n<li>tcp是面向字节流的，udp是面向数据报的</li>\n<li>tcp的请求是有顺序的</li>\n<li>tcp相较udp是比较可靠的，不会出现丢包的情况</li>\n<li>udp具有较好的实时性，比如直播，实时转播画面</li>\n</ul>\n<h3 id=\"相对定位和绝对定位\"><a href=\"#相对定位和绝对定位\" class=\"headerlink\" title=\"相对定位和绝对定位\"></a>相对定位和绝对定位</h3><ul>\n<li>相对定位（relative）：相对定位是相对于元素在文档中的初始位置,元素会占据原来的位置</li>\n<li>绝对定位（absolute)：绝对定位是相对于元素最近的已定位的祖先元素</li>\n</ul>\n<h3 id=\"ES6中新特性（数组方法）\"><a href=\"#ES6中新特性（数组方法）\" class=\"headerlink\" title=\"ES6中新特性（数组方法）\"></a>ES6中新特性（数组方法）</h3><ol>\n<li>let，const 块级作用域</li>\n<li>模板字符串</li>\n<li>解构赋值</li>\n<li>箭头函数</li>\n<li>扩展运算符</li>\n<li>Promise</li>\n<li>新增对象方法，字符串方法，数组方法<ul>\n<li>对象新增：Object.assign,Object.is方法</li>\n<li>字符串新增：includes,repeat,padStart,padEnd</li>\n<li>数组新增：of,from,find,findIndex,copyWithin,fill,includes,flat</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"数组方法改变原数组和不改变原数组\"><a href=\"#数组方法改变原数组和不改变原数组\" class=\"headerlink\" title=\"数组方法改变原数组和不改变原数组\"></a>数组方法改变原数组和不改变原数组</h3><ul>\n<li>改变原数组：<ul>\n<li>splice：有删除插入替换功能，第二个参数为 要改变的数组长度</li>\n<li>pop：删除数组尾部的一个元素，返回删除的元素值</li>\n<li>shift: 删除头部的一个元素，返回删除的元素值</li>\n<li>copyWithin：不会改变数组的长度但是会改变数组本身的内容,参数（目标位置，start,end）</li>\n<li>fill: 会改变原数组，参数（value,start,end）</li>\n<li>push: 会改变原数组，返回数组的长度</li>\n</ul>\n</li>\n<li>不会改变原数组的方法<ul>\n<li>concat：方法将两个数组进行合并处理，返回一个新的数组</li>\n<li>filter: 返回一个新的数组，数组长度也可能发送变化</li>\n<li>map：返回一个新的数组，数组的长度不变</li>\n<li>find: 返回符合条件的第一个元素的值</li>\n<li>findIndex: 返回符合条件的第一个元素的索引值</li>\n<li>slice： 用于截取数组返回一个新的数组</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Promise的概念、作用、以及实际运用\"><a href=\"#Promise的概念、作用、以及实际运用\" class=\"headerlink\" title=\"Promise的概念、作用、以及实际运用\"></a>Promise的概念、作用、以及实际运用</h3><ul>\n<li><a href=\"https://blog.csdn.net/weixin_43797908/article/details/107751340\">promise总结</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_42614080/article/details/94711373\">promise总结</a></li>\n</ul>\n<h3 id=\"手写一个Object-create\"><a href=\"#手写一个Object-create\" class=\"headerlink\" title=\"手写一个Object.create\"></a>手写一个Object.create</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">  fn.prototype = obj</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> fn()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>1.创建一个临时性的构造函数<br>2.将传入的对象作为这个构造函数的原型<br>3.最后返回了这个临时类型的一个新实例。</p>\n<h3 id=\"判断类型的方法\"><a href=\"#判断类型的方法\" class=\"headerlink\" title=\"判断类型的方法\"></a>判断类型的方法</h3><ul>\n<li>typeof</li>\n</ul>\n<ol>\n<li>基本数据类型可以使用 <code>typeof</code> 的方法去判断</li>\n<li><code>typeof null</code> 为：<code>Object</code></li>\n<li><code>typeof NAN</code> 为 <code>number</code></li>\n<li>对于创建的对象一般返回 <code>Object</code></li>\n</ol>\n<ul>\n<li>使用instanceof对已知的对象类型进行判断</li>\n<li>使用object原型方法toString,返回类似于 [Object Object] 形式的值，使用切割的方法将类型分割出来</li>\n</ul>\n<h3 id=\"前端模块化\"><a href=\"#前端模块化\" class=\"headerlink\" title=\"前端模块化\"></a>前端模块化</h3><ol>\n<li><p>CommonJs（典型代表：node.js早期）：<br>它通过 require 来引入模块，通过 module.exports 定义模块的输出接口<br>这种模块加载方案是服务器端的解决方案，它是以同步的方式来引入模块的<br>因为在服务端文件都存储在本地磁盘，所以读取非常快，所以以同步的方式加载没有问题<br>但如果是在浏览器端，由于模块的加载是使用网络请求，因此使用异步加载的方式更加合适</p>\n</li>\n<li><p>AMD（典型代表：require.js）：<br>这种方案采用异步加载的方式来加载模块，模块的加载不影响后面语句的执行<br>所有依赖这个模块的语句都定义在一个回调函数里，等到加载完成后再执行回调函数。require.js 实现了 AMD 规范</p>\n</li>\n<li><p>CMD（典型代表：sea.js）：<br>这种方案和 AMD 方案都是为了解决异步模块加载的问题，sea.js 实现了 CMD 规范<br>它和require.js的区别在于模块定义时对依赖的处理不同和对依赖模块的执行时机的处理不同</p>\n</li>\n<li><p>ES6 Module：<br>ES6 提出的方案，使用 import 和 export 的形式来导入导出模块</p>\n</li>\n</ol>\n<h2 id=\"vue常见的面试题\"><a href=\"#vue常见的面试题\" class=\"headerlink\" title=\"vue常见的面试题\"></a>vue常见的面试题</h2><h3 id=\"vue-router说说你了解的\"><a href=\"#vue-router说说你了解的\" class=\"headerlink\" title=\"vue-router说说你了解的\"></a>vue-router说说你了解的</h3><ul>\n<li>两种模式hash模式和history模式</li>\n<li>两种的区别：<ul>\n<li>都是依靠浏览器自身的特性；</li>\n<li>hash模式是在浏览器地址中加一个#号，虽然改变了url地址，但是它不会包括在http请求，只是用来指导浏览器的动作</li>\n<li>history模式则是没有#号 但是在页面刷新的时候如果后端没有进行配置，并且访问不到资源就会造成404局面，因此需要去配置好nginx进行拦截处理</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vue2和vue3的区别\"><a href=\"#vue2和vue3的区别\" class=\"headerlink\" title=\"vue2和vue3的区别\"></a>vue2和vue3的区别</h3><ul>\n<li><p>vue2和vue3的数据双向绑定的原理发生了变化</p>\n<ul>\n<li>vue2使用的是es5中的API Object.defineProperty()对数据进行劫持结合发布者订阅者模式的方式来实现；</li>\n<li>vue3使用的是ES6中的API proxy 进行数据代理</li>\n</ul>\n</li>\n<li><p>vue3支持碎片化节点，组件中可以有多个根节点</p>\n</li>\n<li><p>vue2和vue3使用的API不同</p>\n<ul>\n<li>vue2 使用的是Options API选项形式；</li>\n<li>vue3 使用的是合成型API composition API 组合式API；</li>\n</ul>\n</li>\n<li><p>vue2和vue3它们的生命周期不同</p>\n<ul>\n<li>vue2：<ul>\n<li>beforeCreate</li>\n<li>created</li>\n<li>beforeMunted</li>\n<li>Mounted</li>\n<li>beforeUpdate</li>\n<li>Update</li>\n<li>beforeDestory</li>\n<li>destoryed</li>\n<li>activated</li>\n<li>deactivated</li>\n</ul>\n</li>\n<li>vue3:<ul>\n<li>setup()</li>\n<li>onBeforeMount</li>\n<li>onMouted</li>\n<li>computed</li>\n<li>onBeforeUpdate</li>\n<li>onUpdated</li>\n<li>onBeforeUnmount</li>\n<li>onUnmouted</li>\n<li>onActivated</li>\n<li>onDeactivated</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>它们建立数据方式不同</p>\n<ul>\n<li>vue2: 直接在data中创建</li>\n<li>vue3: 在setup中创建，该组件在组件初始化构建时候触发</li>\n</ul>\n</li>\n<li><p>父子的传参方式不同</p>\n</li>\n<li><p>vue3新增了瞬移组件 teleport</p>\n</li>\n</ul>\n<h3 id=\"Vuex面试题\"><a href=\"#Vuex面试题\" class=\"headerlink\" title=\"Vuex面试题\"></a>Vuex面试题</h3><ul>\n<li><a href=\"https://blog.csdn.net/m0_64346035/article/details/124619717\">vuex面试题</a></li>\n</ul>\n<h3 id=\"nextTick-vue\"><a href=\"#nextTick-vue\" class=\"headerlink\" title=\"nextTick vue\"></a>nextTick vue</h3><ul>\n<li><p>用途：<br>在视图更新之后，基于新的视图进行操作,使用nextTick中的回调函数，在下一次更新DOM更新循环结束之后执行回调</p>\n</li>\n<li><p>为什么使用$nextTick?<br>DOM更新是异步操作，在数据更新完成之后，DOM不会立即更新，而是等同一事件循环中的所有数据变化完成之后，在统一进行视图更新。所以使用$nextTick可以使同步任务在DOM更新完成之后去执行。<br>例如：<br>获取设置输入框由隐藏变为显示，再去获取这个DOM元素就需要使用$nextTick<br>在 created 和 mounted 阶段，如果需要操作渲染后的试图，也要使用 nextTick 方法。<br>注意 mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted</p>\n</li>\n<li><p>原理：事件循环</p>\n</li>\n</ul>\n<h3 id=\"vue-eventBus\"><a href=\"#vue-eventBus\" class=\"headerlink\" title=\"vue eventBus\"></a>vue eventBus</h3><ul>\n<li><p>EventBus 是消息传递的一种方式，基于一个消息中心，订阅和发布消息的模式，称为发布订阅者模式。</p>\n</li>\n<li><p>on 订阅消息 emit 发布消息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lass Bus &#123;</span><br><span class=\"line\">  <span class=\"title\">constructor</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.callbacks = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  $on(name,fn) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.callbacks[name] = []</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.callbacks[name].push(fn)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  $emit(name,args) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span>.callbacks[name])&#123;</span><br><span class=\"line\">       <span class=\"comment\">//存在遍历所有callback</span></span><br><span class=\"line\">       <span class=\"built_in\">this</span>.callbacks[name].forEach(<span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> cb(args))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> EventBus = <span class=\"keyword\">new</span> Bus()</span><br><span class=\"line\">EventBus.$on(<span class=\"string\">&#x27;fn1&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">`订阅的消息是：<span class=\"subst\">$&#123;msg&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">EventBus.$emit(<span class=\"string\">&#x27;fn1&#x27;</span>, <span class=\"string\">&#x27;你好，世界！&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"vue父子组件传值单例问题\"><a href=\"#vue父子组件传值单例问题\" class=\"headerlink\" title=\"vue父子组件传值单例问题\"></a>vue父子组件传值单例问题</h3></li>\n<li><p>数据从父组件传递给子组件，子组件内部不能修改从父级传过来的数据。防止子组件意外改变父组件的状态</p>\n</li>\n</ul>\n<h3 id=\"EventBus-说说你了解的\"><a href=\"#EventBus-说说你了解的\" class=\"headerlink\" title=\"EventBus 说说你了解的\"></a>EventBus 说说你了解的</h3><ul>\n<li><p>如果使用不善，EventBus会是一种灾难，到底是什么样的“灾难”了？大家都知道vue是单页应用，如果你在某一个页面刷新了之后，与之相关的EventBus会被移除，这样就导致业务走不下去。还要就是如果业务有反复操作的页面，EventBus在监听的时候就会触发很多次，也是一个非常大的隐患。这时候我们就需要好好处理EventBus在项目中的关系。通常会用到，在vue页面销毁时，同时移除EventBus事件监听。</p>\n</li>\n<li><p>有三种方法 <code>$emit 用于发送数据</code> <code>$on 用于接受监听数据</code> <code>$off 用于销毁监听事件</code></p>\n</li>\n</ul>\n<h3 id=\"computed和watch的区别\"><a href=\"#computed和watch的区别\" class=\"headerlink\" title=\"computed和watch的区别\"></a>computed和watch的区别</h3><ul>\n<li>computed是一对多，多次调用，把第一次调用的结果放入缓冲，节约性能</li>\n<li>在computed中定义一个函数，看起来是一个函数，其实是一个属性</li>\n</ul>\n<h3 id=\"vue2和vue3的数据双向绑定\"><a href=\"#vue2和vue3的数据双向绑定\" class=\"headerlink\" title=\"vue2和vue3的数据双向绑定\"></a>vue2和vue3的数据双向绑定</h3><ol>\n<li>为什么要做这个改进？ vue2中使用的是ES5 objec.defineProperty 方法 </li>\n</ol>\n<p>vue2</p>\n<ul>\n<li>关于对象：对页面初始化实例中的propery进行getter和setter的转化，所以必须property必须在data对象上存在才能让vue将他转变为响应式的</li>\n<li>关于数组： 当你使用索引值去直接改变数组时，或者当你直接去修改数组的长度时，不能检测数组的变动<br>vue3</li>\n<li>使用了ES6语法Proxy方法 用于定义基本操作的自定义行为,通过Reflect(反射): 对源对象的属性进行操作.</li>\n</ul>\n<h3 id=\"vue3-ref和reactive\"><a href=\"#vue3-ref和reactive\" class=\"headerlink\" title=\"vue3 ref和reactive\"></a>vue3 ref和reactive</h3><ul>\n<li><code>ref</code> 用来定义响应式数据的（可以是基本类型也可以是引用类型）</li>\n<li><code>reactive</code> 定义一个对象类型的响应式数据，基本数据类型还是使用ref</li>\n<li><code>ref</code> 通过Object.defineProperty 中的get和set实现数据劫持（响应式）</li>\n<li><code>reactive</code> 通过proxy 数据代理的方式去实现数据的响应式，并且使用reflect 来操作源对象内部的数据</li>\n</ul>\n","more":"<h2 id=\"this指向问题\"><a href=\"#this指向问题\" class=\"headerlink\" title=\"this指向问题\"></a>this指向问题</h2><h3 id=\"题1\"><a href=\"#题1\" class=\"headerlink\" title=\"题1\"></a>题1</h3><iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"this指向问题1\" src=\"https://codepen.io/rr210/embed/WNzjrWK?default-tab=html%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/rr210/pen/WNzjrWK\">\n  this指向问题1</a> by Harry (<a href=\"https://codepen.io/rr210\">@rr210</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n\n<h3 id=\"题2\"><a href=\"#题2\" class=\"headerlink\" title=\"题2\"></a>题2</h3><iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"this 2\" src=\"https://codepen.io/rr210/embed/LYdyNJz?default-tab=js%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/rr210/pen/LYdyNJz\">\n  this 2</a> by Harry (<a href=\"https://codepen.io/rr210\">@rr210</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n\n<h3 id=\"题3\"><a href=\"#题3\" class=\"headerlink\" title=\"题3\"></a>题3</h3><iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"Untitled\" src=\"https://codepen.io/rr210/embed/QWmvNZe?default-tab=js%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/rr210/pen/QWmvNZe\">\n  Untitled</a> by Harry (<a href=\"https://codepen.io/rr210\">@rr210</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n\n<h3 id=\"题4\"><a href=\"#题4\" class=\"headerlink\" title=\"题4\"></a>题4</h3><iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"this4\" src=\"https://codepen.io/rr210/embed/abYWNPW?default-tab=js%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/rr210/pen/abYWNPW\">\n  this4</a> by Harry (<a href=\"https://codepen.io/rr210\">@rr210</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n\n<h2 id=\"css面试题\"><a href=\"#css面试题\" class=\"headerlink\" title=\"css面试题\"></a>css面试题</h2><ol>\n<li>BFC(块级格式化上下文，用于清除浮动，防止margin重叠) 独立的容器</li>\n<li>BFC的生成</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float 不为none的元素</span><br><span class=\"line\">position为fixed和absolute的元素</span><br><span class=\"line\">display为inline-block,table-cell,talbe-caption,flex,inline-flex的元素</span><br><span class=\"line\">overflow不为visible的元素</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>常见的块元素有<code>&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;</code>等，其中<code>&lt;div&gt;</code>标签是最典型的块元素。</li>\n<li>常见的行内元素有<code>&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;</code>等，其中<code>&lt;span&gt;</code>标签最典型的行内元素。有的地方也成内联元素</li>\n<li>在行内元素中有几个特殊的标签——<code>&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;</code>，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。</li>\n<li>H5语义化元素：header,nav,main,article,section,aside,footer,small,strong</li>\n</ol>\n<ul>\n<li><a href=\"https://juejin.cn/post/6998925491797229599\">CSS中 块级元素、行内元素、行内块元素区别</a></li>\n</ul>\n<h2 id=\"基础面试题\"><a href=\"#基础面试题\" class=\"headerlink\" title=\"基础面试题\"></a>基础面试题</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给定后转换成指定的输出形式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> csv = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">name, age, parent</span></span><br><span class=\"line\"><span class=\"string\">Bob, 36, David,</span></span><br><span class=\"line\"><span class=\"string\">David, 60,</span></span><br><span class=\"line\"><span class=\"string\">Anni, 10, Bob</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">csvTran</span>(<span class=\"params\">t</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a = t.split(<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> b = a.splice(<span class=\"number\">1</span>, a.length - <span class=\"number\">2</span>).map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v.replace(<span class=\"regexp\">/\\s/g</span>, <span class=\"string\">&#x27;&#x27;</span>).split(<span class=\"string\">&#x27;,&#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">const</span> d = b.slice(<span class=\"number\">1</span>, b.length)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> d) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> g = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> f <span class=\"keyword\">in</span> i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> h = b[<span class=\"number\">0</span>][f]</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(h)&#123;</span><br><span class=\"line\">            g[h] = i[f]</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        list.push(g)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(list)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">csvTran(csv)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>给定一个正偶数，算出他有几种方式拆分成两个素数相加的形式</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"comment\">// 寻找所有的素数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AddList</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> flag = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> m = <span class=\"number\">2</span>; m &lt; i; m++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(m)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i % m === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                flag = <span class=\"literal\">false</span></span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(m)</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">            res.push(i)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 相加计算</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countAdd</span>(<span class=\"params\">list, num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> r = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; list.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; list.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (list[i] + list[j] === num) &#123;</span><br><span class=\"line\">                r.push([[list[i], list[j]]])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(r)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> l = AddList(a)</span><br><span class=\"line\">countAdd(l, a)</span><br></pre></td></tr></table></figure>\n<h2 id=\"面试题问答\"><a href=\"#面试题问答\" class=\"headerlink\" title=\"面试题问答\"></a>面试题问答</h2><h3 id=\"微信小程序是如何实现登录的\"><a href=\"#微信小程序是如何实现登录的\" class=\"headerlink\" title=\"微信小程序是如何实现登录的\"></a>微信小程序是如何实现登录的</h3><ul>\n<li>首先需要一个按钮来触发事件</li>\n<li>调用微信小程序的登录接口<code>wx.login</code>,拿到code</li>\n<li>调用微信小程序的获取用户的接口<code>wx.getUserProfile</code>拿到个人信息</li>\n<li>拿到个人信息后调用后台的接口，将个人信息在传入到后台，登录后将相关的信息缓冲在本地存储中，方便后续的开发使用</li>\n</ul>\n<h3 id=\"闭包的概念-作用-应用及缺点\"><a href=\"#闭包的概念-作用-应用及缺点\" class=\"headerlink\" title=\"闭包的概念,作用,应用及缺点\"></a>闭包的概念,作用,应用及缺点</h3><ul>\n<li>概念：函数嵌套函数，内部函数就是闭包；能够读取其他函数内部变量的函数</li>\n<li>作用：可以读取函数内部的变量；可以使变量的值始终在内存中，不会被垃圾回收机制回收；可以避免使用全局变量，防止全局变量污染</li>\n<li>应用：for循环中的保留i的操作；防抖和节流；函数柯里化</li>\n<li>缺点：容易引起内存泄漏</li>\n</ul>\n<h3 id=\"原型和原型链\"><a href=\"#原型和原型链\" class=\"headerlink\" title=\"原型和原型链\"></a>原型和原型链</h3><ul>\n<li>原型：每个函数上都有prototype属性，该属性指向原型对象；使用原型对象的好处就是所有的实例共享它所包含的属性和方法</li>\n<li>原型链：每个对象上都有一个原型对象，通过__proto__指针指向其原型对象，并从中继承方法和属性，同时原型对象也可能拥有原型，最终指向null</li>\n</ul>\n<p><img src=\"https://cloud.mr90.top/hexo/5/580241e3-67af-4e14-894d-dde6cceca330.png\"></p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ol>\n<li>实现继承共有6种方法，有：原型链继承，构造函数继承，组合式继承（原型链+构造函数），原型继承，寄生式继承，寄生组合式继承</li>\n<li>这几种方法 每种方法都有各自的特点<ul>\n<li>原型链继承他会将子函数原型指向要继承的函数实例，这样会造成共用一个原型对象，当一个实例发生变化，另一个也随之跟着变化</li>\n<li>构造函数继承 只能继承父类的实例的属性和方法，不能继承父类原型的属性和方法</li>\n<li>组合式继承 原型链和构造函数继承结合 会导致 在执行两次构造函数，影响性能；并且这里的constructor可进行遍历(应该禁用)</li>\n<li>原型式继承 使用es5中的方法Object.create方法 创建一个空的对象，将新对象的原型指向对象</li>\n<li>寄生式继承 在原型式继承的基础上，在父类的方法上添加了一些方法</li>\n<li>寄生组合式继承 使用工厂函数进行封装处理 使用es5中的Object.defineProperty方法对函数原型（实例原型）的constructor的值进行配置enumerable为false</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"原型链继承\"><a href=\"#原型链继承\" class=\"headerlink\" title=\"原型链继承\"></a>原型链继承</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;parent1&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.type = <span class=\"string\">&#x27;child2&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child1.prototype = <span class=\"keyword\">new</span> Parent1();</span><br><span class=\"line\"><span class=\"keyword\">const</span> s1 = <span class=\"keyword\">new</span> Child1()</span><br><span class=\"line\">s1.play.push(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> s2 = <span class=\"keyword\">new</span> Child1()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s1.play) <span class=\"comment\">// [1,2,3,4]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s2.play) <span class=\"comment\">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>缺点：实现数据共享，当其中一个实例发生改变 另一个也随之跟着改变</li>\n</ul>\n<h4 id=\"构造函数方法-call方法\"><a href=\"#构造函数方法-call方法\" class=\"headerlink\" title=\"构造函数方法(call方法)\"></a>构造函数方法(call方法)</h4><ul>\n<li>缺点：只能继承父类的实例的属性和方法，但是不能继承父类原型的属性和方法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;parent1&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">Parent1.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  Parent1.call(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.type = <span class=\"string\">&#x27;child1&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">let</span> child = <span class=\"keyword\">new</span> Child1();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child);  <span class=\"comment\">// 没问题</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.getName());  <span class=\"comment\">// 会报错</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"组合继承-前两种方法\"><a href=\"#组合继承-前两种方法\" class=\"headerlink\" title=\"组合继承(前两种方法)\"></a>组合继承(前两种方法)</h4><ul>\n<li>缺点：多执行了一次构造函数,并且这里的constructor可进行遍历</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent3</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;parent3&#x27;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">Parent3.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 第二次调用 Parent3()</span></span><br><span class=\"line\">  Parent3.call(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.type = <span class=\"string\">&#x27;child3&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 第一次调用 Parent3()</span></span><br><span class=\"line\">Child3.prototype = <span class=\"keyword\">new</span> Parent3();</span><br><span class=\"line\"><span class=\"comment\">// 手动挂上构造器，指向自己的构造函数</span></span><br><span class=\"line\">Child3.prototype.constructor = Child3;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"keyword\">new</span> Child3();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s4 = <span class=\"keyword\">new</span> Child3();</span><br><span class=\"line\">s3.play.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s3.play, s4.play);  <span class=\"comment\">// 不互相影响</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s3.getName()); <span class=\"comment\">// 正常输出&#x27;parent3&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s4.getName()); <span class=\"comment\">// 正常输出&#x27;parent3&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h4><ul>\n<li>使用Object.create方法来实现，多个实例的引用类型属性指向相同的内存，存在篡改的可能  与原型链继承类似</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> parent4 = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&quot;parent4&quot;</span>,</span><br><span class=\"line\">  friends: [<span class=\"string\">&quot;p1&quot;</span>, <span class=\"string\">&quot;p2&quot;</span>, <span class=\"string\">&quot;p3&quot;</span>],</span><br><span class=\"line\">  getName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">let</span> person4 = <span class=\"built_in\">Object</span>.create(parent4);</span><br><span class=\"line\">person4.name = <span class=\"string\">&quot;tom&quot;</span>;</span><br><span class=\"line\">person4.friends.push(<span class=\"string\">&quot;jerry&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> person5 = <span class=\"built_in\">Object</span>.create(parent4);</span><br><span class=\"line\">person5.friends.push(<span class=\"string\">&quot;lucy&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person4.name);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person4.name === person4.getName());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person5.name);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person4.friends);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person5.friends);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">let</span> parent5 = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&quot;parent5&quot;</span>,</span><br><span class=\"line\">  friends: [<span class=\"string\">&quot;p1&quot;</span>, <span class=\"string\">&quot;p2&quot;</span>, <span class=\"string\">&quot;p3&quot;</span>],</span><br><span class=\"line\">  getName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">original</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> clone = <span class=\"built_in\">Object</span>.create(original);</span><br><span class=\"line\">  clone.getFriends = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.friends</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> clone;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">let</span> person5 = clone(parent5);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person5.getName());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person5.getFriends());</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span> (<span class=\"params\">parent, child</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这里改用 Object.create 就可以减少组合继承中多进行一次构造的过程</span></span><br><span class=\"line\">  child.prototype = <span class=\"built_in\">Object</span>.create(parent.prototype);</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(child.prototype,<span class=\"string\">&#x27;constructor&#x27;</span>,&#123;</span><br><span class=\"line\">      value:child,</span><br><span class=\"line\">      enumerable:<span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent6</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;parent6&#x27;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> Parent6.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child6</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  Parent6.call(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.friends = <span class=\"string\">&#x27;child5&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">clone(Parent6, Child6);</span><br><span class=\"line\"> </span><br><span class=\"line\">Child6.prototype.getFriends = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.friends;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">let</span> person6 = <span class=\"keyword\">new</span> Child6();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person6);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person6.getName());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person6.getFriends());</span><br></pre></td></tr></table></figure>\n<h3 id=\"节流和防抖\"><a href=\"#节流和防抖\" class=\"headerlink\" title=\"节流和防抖\"></a>节流和防抖</h3><ol>\n<li>防抖就是在某一时间内快速执行事件，然后仅最后一次事件执行</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dedounce = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn, delay</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            fn.call(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">        &#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>节流控制执行次数,在某段时间内如果执行多次，将仅仅执行一次</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn,delay</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!timer)&#123;</span><br><span class=\"line\">               timer= <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">                fn.call(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">                timer = <span class=\"literal\">null</span></span><br><span class=\"line\">            &#125;,delay)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"apply，call，bind方法\"><a href=\"#apply，call，bind方法\" class=\"headerlink\" title=\"apply，call，bind方法\"></a>apply，call，bind方法</h3><ul>\n<li>都是用来改变this指向问题的</li>\n<li>apply,call是立即执行，bind返回一个函数</li>\n</ul>\n<h4 id=\"手写实现一个apply\"><a href=\"#手写实现一个apply\" class=\"headerlink\" title=\"手写实现一个apply\"></a>手写实现一个apply</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype._apply = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context, arg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arg)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span> !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&#x27;类型传入错误&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个唯一的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = <span class=\"built_in\">Symbol</span>()</span><br><span class=\"line\">    context[key] = <span class=\"built_in\">this</span></span><br><span class=\"line\">    result = context[key](arg)</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context[key]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&quot;zs&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">arg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = arg[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn._apply(obj, [<span class=\"string\">&#x27;zs&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<h4 id=\"手写实现一个call\"><a href=\"#手写实现一个call\" class=\"headerlink\" title=\"手写实现一个call\"></a>手写实现一个call</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype._call = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context, ...arg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arg)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span> !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&#x27;类型传入错误&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个唯一的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = <span class=\"built_in\">Symbol</span>()</span><br><span class=\"line\">    context[key] = <span class=\"built_in\">this</span></span><br><span class=\"line\">    result = context[key](...arg)</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context[key]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&quot;zs&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn._call(obj, <span class=\"string\">&#x27;zs&#x27;</span>, <span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"手写实现一个bind\"><a href=\"#手写实现一个bind\" class=\"headerlink\" title=\"手写实现一个bind\"></a>手写实现一个bind</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype._bind = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span> !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">&#x27;Error&#x27;</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> self = <span class=\"built_in\">this</span></span><br><span class=\"line\">     <span class=\"keyword\">let</span> context = args.shift()  <span class=\"comment\">//shift 方法是将数组中的第一个数删除，然后然后返回删除的数</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...arg</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> self.apply(context, args[<span class=\"number\">0</span>].concat([...arg]))</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">...arg</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">this</span>.a = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;a:&#x27;</span> + <span class=\"built_in\">this</span>.a);</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;name:&#x27;</span> + <span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">     name: <span class=\"string\">&#x27;zs&#x27;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(fn._bind(obj, [<span class=\"string\">&#x27;apply&#x27;</span>, <span class=\"string\">&#x27;0&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>])(<span class=\"number\">1</span>, <span class=\"number\">3</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"ajax实现过程\"><a href=\"#ajax实现过程\" class=\"headerlink\" title=\"ajax实现过程\"></a>ajax实现过程</h3><ol>\n<li>创建一个XMLHttpRequest对象</li>\n<li>在创建好的对象下使用<code>open</code>方法，创建一个http请求</li>\n<li>并且设置请求头的信息，比如<code>content-type</code></li>\n<li>设置响应http请求状态变化的函数<code>onreadstatechange</code></li>\n<li>发送http请求，使用send方法</li>\n<li>获取异步调用时返回的结果</li>\n</ol>\n<ul>\n<li>状态码 0-4 分别表示 未初始化状态，初始化状态，发送请求时的状态，接受请求时的状态，完成时的状态</li>\n</ul>\n<h3 id=\"axios实现原理\"><a href=\"#axios实现原理\" class=\"headerlink\" title=\"axios实现原理\"></a>axios实现原理</h3><ol>\n<li>它是一个基于Promise的http库，可以在浏览器和node.js中使用</li>\n<li>从浏览器中创建XMLhttpRequest 从node.js创建一个http请求</li>\n<li>支持promise API</li>\n<li>可以转换请求数据和响应数据，并对响应的内容自动转换为json类型的数据</li>\n<li>取消请求，request.abort</li>\n<li>客户端支持防御XSRF（跨站请求伪造）</li>\n</ol>\n<h3 id=\"浅拷贝和深拷贝\"><a href=\"#浅拷贝和深拷贝\" class=\"headerlink\" title=\"浅拷贝和深拷贝\"></a>浅拷贝和深拷贝</h3><ol>\n<li>深拷贝是指：开辟了一个新的空间，然后将对象指向该地址，并且与原来的对象互不干扰</li>\n<li>浅拷贝是指：比较浅的拷贝，他与原来的变量还是指向同一个地址，两者之间相互影响</li>\n</ol>\n<ul>\n<li>原始类型：String,Null,undefined,boolean,number,symbol</li>\n<li>引用类型：Object,function,Array</li>\n</ul>\n<p>实现浅拷贝的方法：</p>\n<ul>\n<li>针对引用数据类型 使用for in的方法实现</li>\n</ul>\n<p>实现深拷贝的方法</p>\n<ul>\n<li>使用<code>for..in..</code> + <code>递归</code>的方式实现</li>\n<li>使用<code>JSON.parse(JSON.stringify(对象))</code>实现深拷贝</li>\n</ul>\n<h3 id=\"箭头函数和普通函数的区别\"><a href=\"#箭头函数和普通函数的区别\" class=\"headerlink\" title=\"箭头函数和普通函数的区别\"></a>箭头函数和普通函数的区别</h3><ol>\n<li>外形也不同箭头函数使用箭头定义</li>\n<li>箭头函数全是匿名函数；普通函数可以有匿名函数也可以有具名函数</li>\n<li>箭头函数没有this，它的this指向上层作用域;普通函数的this指向调用它的对象，如果用作构造函数，则指向它的实例</li>\n<li>箭头函数没有arguments；普通函数每一个都具有arguments，用来存储实际传递的参数；</li>\n<li>箭头函数没有prototype属性</li>\n<li>箭头函数不能使用new 来构造函数</li>\n</ol>\n<h3 id=\"跨域的解决方法\"><a href=\"#跨域的解决方法\" class=\"headerlink\" title=\"跨域的解决方法\"></a>跨域的解决方法</h3><ol>\n<li>使用<code>jsonp</code>解决，缺陷只能进行get请求，实现原理就是创建一个script元素，将请求的参数赋值给src然后配合后端，数据通过函数执行传参的方式实现数据传递</li>\n<li>使用 <code>document.domain + iframe</code> 实现</li>\n<li>使用 <code>window.name + iframe</code> 来实现</li>\n<li>使用nginx 配置 “<code>assess-control-allow-origin</code>“ 设置跨域资源共享</li>\n<li>使用<code>location.hash + iframe</code> 来实现</li>\n<li>使用<code>webSockets</code>来实现</li>\n<li>使用<code>window.postMessage</code> 来实现</li>\n</ol>\n<h3 id=\"什么是柯里化，手写实现\"><a href=\"#什么是柯里化，手写实现\" class=\"headerlink\" title=\"什么是柯里化，手写实现\"></a>什么是柯里化，手写实现</h3><ul>\n<li>把多参数的函数，转换为单参数的函数（参数复用，闭包原理）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">currying</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"built_in\">Array</span>.prototype.slice(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> <span class=\"built_in\">arguments</span>) &#123; args.push(i) &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.toString = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> args.reduce(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(currying(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>).toString());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"什么是事件监听、事件委托\"><a href=\"#什么是事件监听、事件委托\" class=\"headerlink\" title=\"什么是事件监听、事件委托\"></a>什么是事件监听、事件委托</h3><ol>\n<li>事件委托：将子元素要执行的响应事件，绑定到父元素上，让父元素去代替监听动作；原理是事件冒泡</li>\n<li>事件捕获和事件冒泡的执行顺序：先捕获后冒泡</li>\n<li>事件监听 使用 <code>addEventListener</code> 实现</li>\n</ol>\n<h3 id=\"什么是Event-LOOP-事件循环\"><a href=\"#什么是Event-LOOP-事件循环\" class=\"headerlink\" title=\"什么是Event LOOP(事件循环)\"></a>什么是Event LOOP(事件循环)</h3><ol>\n<li>事件循环是javascript的执行机制（先同步后异步，异步先微任务后宏任务）</li>\n<li>常见的宏任务：整段代码script,setTimeout,setInterval</li>\n<li>常见的微任务：promise,process.nextTick()</li>\n</ol>\n<h3 id=\"垂直局中的几种实现方法\"><a href=\"#垂直局中的几种实现方法\" class=\"headerlink\" title=\"垂直局中的几种实现方法\"></a>垂直局中的几种实现方法</h3><ol>\n<li>使用flex方法<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.name</span> &#123;</span></span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\">        height: 100px;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#a71111</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    body&#123;</span><br><span class=\"line\">        margin: 0;</span><br><span class=\"line\">        height: 100vh;</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        justify-content: center;</span><br><span class=\"line\">        align-items: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>定位实现<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.name</span> &#123;</span></span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\">        height: 100px;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#a71111</span>;</span></span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        top: 0;</span><br><span class=\"line\">        left: 0;</span><br><span class=\"line\">        right: 0;</span><br><span class=\"line\">        bottom: 0;</span><br><span class=\"line\">        margin: auto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    body&#123;</span><br><span class=\"line\">        margin: 0;</span><br><span class=\"line\">        height: 100vh;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>定位实现+transform</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.name</span> &#123;</span></span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\">        height: 100px;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#a71111</span>;</span></span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        top: 50%;</span><br><span class=\"line\">        left: 50%;</span><br><span class=\"line\">        transform: translate(-50%, -50%);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">        position: relative;</span><br><span class=\"line\">        margin: 0;</span><br><span class=\"line\">        height: 100vh;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用定位+margin方法实现</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.name</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: -<span class=\"number\">50px</span> <span class=\"number\">0</span> <span class=\"number\">0</span> -<span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>使用text-align+line-height</p>\n</li>\n<li><p>使用grid方法</p>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100vh</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">    <span class=\"attribute\">place-items</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>定位+calc方法</li>\n</ul>\n<h3 id=\"get，post的区别\"><a href=\"#get，post的区别\" class=\"headerlink\" title=\"get，post的区别\"></a>get，post的区别</h3><ol>\n<li>get一般用来向服务器获取数据，而post则是向服务器发送数据</li>\n<li>get请求的时候是将请求的信息都暴露在url上，而post是将数据都放到body中</li>\n<li>get地址可以被缓冲，而post不能</li>\n<li>get请求长度是有限制的，而post请求的长度是没有限制的</li>\n</ol>\n<h3 id=\"localstorage-sessionStorage-cookie的区别\"><a href=\"#localstorage-sessionStorage-cookie的区别\" class=\"headerlink\" title=\"localstorage,sessionStorage,cookie的区别\"></a>localstorage,sessionStorage,cookie的区别</h3><ul>\n<li>它们都是存储到客户端</li>\n</ul>\n<ol>\n<li>cookie数据始终在同源的http请求中携带(即使不需要), 即cookie在浏览器和服务器间来回传递, 而sessionStorage和localStorage不会自动把数据发送给服务器, 仅在本地保存.cookie数据还有路径(path)的概念, 可以限制cookie只属于某个路径下</li>\n<li>存储大小限制也不同, cookie数据不能超过4K, 同时因为每次http请求都会携带cookie、所以cookie只适合保存很小的数据, 如会话标识.sessionStorage和localStorage虽然也有存储大小的限制, 但比cookie大得多, 可以达到5M或更大</li>\n<li>数据有效期不同, sessionStorage: 仅在当前浏览器窗口关闭之前有效; localStorage: 始终有效, 窗口或浏览器关闭也一直保存, 因此用作持久数据; cookie: 只在设置的cookie过期时间之前有效, 即使窗口关闭或浏览器关闭</li>\n<li>作用域不同, sessionStorage不在不同的浏览器窗口中共享, 即使是同一个页面; localstorage在所有同源窗口中都是共享的; cookie也是在所有同源窗口中都是共享的</li>\n</ol>\n<h3 id=\"UDP和TCP的区别\"><a href=\"#UDP和TCP的区别\" class=\"headerlink\" title=\"UDP和TCP的区别\"></a>UDP和TCP的区别</h3><ul>\n<li>tcp是面向连接的（需要进行三次握手和四次挥手），udp是面向无连接</li>\n<li>tcp是面向字节流的，udp是面向数据报的</li>\n<li>tcp的请求是有顺序的</li>\n<li>tcp相较udp是比较可靠的，不会出现丢包的情况</li>\n<li>udp具有较好的实时性，比如直播，实时转播画面</li>\n</ul>\n<h3 id=\"相对定位和绝对定位\"><a href=\"#相对定位和绝对定位\" class=\"headerlink\" title=\"相对定位和绝对定位\"></a>相对定位和绝对定位</h3><ul>\n<li>相对定位（relative）：相对定位是相对于元素在文档中的初始位置,元素会占据原来的位置</li>\n<li>绝对定位（absolute)：绝对定位是相对于元素最近的已定位的祖先元素</li>\n</ul>\n<h3 id=\"ES6中新特性（数组方法）\"><a href=\"#ES6中新特性（数组方法）\" class=\"headerlink\" title=\"ES6中新特性（数组方法）\"></a>ES6中新特性（数组方法）</h3><ol>\n<li>let，const 块级作用域</li>\n<li>模板字符串</li>\n<li>解构赋值</li>\n<li>箭头函数</li>\n<li>扩展运算符</li>\n<li>Promise</li>\n<li>新增对象方法，字符串方法，数组方法<ul>\n<li>对象新增：Object.assign,Object.is方法</li>\n<li>字符串新增：includes,repeat,padStart,padEnd</li>\n<li>数组新增：of,from,find,findIndex,copyWithin,fill,includes,flat</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"数组方法改变原数组和不改变原数组\"><a href=\"#数组方法改变原数组和不改变原数组\" class=\"headerlink\" title=\"数组方法改变原数组和不改变原数组\"></a>数组方法改变原数组和不改变原数组</h3><ul>\n<li>改变原数组：<ul>\n<li>splice：有删除插入替换功能，第二个参数为 要改变的数组长度</li>\n<li>pop：删除数组尾部的一个元素，返回删除的元素值</li>\n<li>shift: 删除头部的一个元素，返回删除的元素值</li>\n<li>copyWithin：不会改变数组的长度但是会改变数组本身的内容,参数（目标位置，start,end）</li>\n<li>fill: 会改变原数组，参数（value,start,end）</li>\n<li>push: 会改变原数组，返回数组的长度</li>\n</ul>\n</li>\n<li>不会改变原数组的方法<ul>\n<li>concat：方法将两个数组进行合并处理，返回一个新的数组</li>\n<li>filter: 返回一个新的数组，数组长度也可能发送变化</li>\n<li>map：返回一个新的数组，数组的长度不变</li>\n<li>find: 返回符合条件的第一个元素的值</li>\n<li>findIndex: 返回符合条件的第一个元素的索引值</li>\n<li>slice： 用于截取数组返回一个新的数组</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Promise的概念、作用、以及实际运用\"><a href=\"#Promise的概念、作用、以及实际运用\" class=\"headerlink\" title=\"Promise的概念、作用、以及实际运用\"></a>Promise的概念、作用、以及实际运用</h3><ul>\n<li><a href=\"https://blog.csdn.net/weixin_43797908/article/details/107751340\">promise总结</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_42614080/article/details/94711373\">promise总结</a></li>\n</ul>\n<h3 id=\"手写一个Object-create\"><a href=\"#手写一个Object-create\" class=\"headerlink\" title=\"手写一个Object.create\"></a>手写一个Object.create</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">  fn.prototype = obj</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> fn()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>1.创建一个临时性的构造函数<br>2.将传入的对象作为这个构造函数的原型<br>3.最后返回了这个临时类型的一个新实例。</p>\n<h3 id=\"判断类型的方法\"><a href=\"#判断类型的方法\" class=\"headerlink\" title=\"判断类型的方法\"></a>判断类型的方法</h3><ul>\n<li>typeof</li>\n</ul>\n<ol>\n<li>基本数据类型可以使用 <code>typeof</code> 的方法去判断</li>\n<li><code>typeof null</code> 为：<code>Object</code></li>\n<li><code>typeof NAN</code> 为 <code>number</code></li>\n<li>对于创建的对象一般返回 <code>Object</code></li>\n</ol>\n<ul>\n<li>使用instanceof对已知的对象类型进行判断</li>\n<li>使用object原型方法toString,返回类似于 [Object Object] 形式的值，使用切割的方法将类型分割出来</li>\n</ul>\n<h3 id=\"前端模块化\"><a href=\"#前端模块化\" class=\"headerlink\" title=\"前端模块化\"></a>前端模块化</h3><ol>\n<li><p>CommonJs（典型代表：node.js早期）：<br>它通过 require 来引入模块，通过 module.exports 定义模块的输出接口<br>这种模块加载方案是服务器端的解决方案，它是以同步的方式来引入模块的<br>因为在服务端文件都存储在本地磁盘，所以读取非常快，所以以同步的方式加载没有问题<br>但如果是在浏览器端，由于模块的加载是使用网络请求，因此使用异步加载的方式更加合适</p>\n</li>\n<li><p>AMD（典型代表：require.js）：<br>这种方案采用异步加载的方式来加载模块，模块的加载不影响后面语句的执行<br>所有依赖这个模块的语句都定义在一个回调函数里，等到加载完成后再执行回调函数。require.js 实现了 AMD 规范</p>\n</li>\n<li><p>CMD（典型代表：sea.js）：<br>这种方案和 AMD 方案都是为了解决异步模块加载的问题，sea.js 实现了 CMD 规范<br>它和require.js的区别在于模块定义时对依赖的处理不同和对依赖模块的执行时机的处理不同</p>\n</li>\n<li><p>ES6 Module：<br>ES6 提出的方案，使用 import 和 export 的形式来导入导出模块</p>\n</li>\n</ol>\n<h2 id=\"vue常见的面试题\"><a href=\"#vue常见的面试题\" class=\"headerlink\" title=\"vue常见的面试题\"></a>vue常见的面试题</h2><h3 id=\"vue-router说说你了解的\"><a href=\"#vue-router说说你了解的\" class=\"headerlink\" title=\"vue-router说说你了解的\"></a>vue-router说说你了解的</h3><ul>\n<li>两种模式hash模式和history模式</li>\n<li>两种的区别：<ul>\n<li>都是依靠浏览器自身的特性；</li>\n<li>hash模式是在浏览器地址中加一个#号，虽然改变了url地址，但是它不会包括在http请求，只是用来指导浏览器的动作</li>\n<li>history模式则是没有#号 但是在页面刷新的时候如果后端没有进行配置，并且访问不到资源就会造成404局面，因此需要去配置好nginx进行拦截处理</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vue2和vue3的区别\"><a href=\"#vue2和vue3的区别\" class=\"headerlink\" title=\"vue2和vue3的区别\"></a>vue2和vue3的区别</h3><ul>\n<li><p>vue2和vue3的数据双向绑定的原理发生了变化</p>\n<ul>\n<li>vue2使用的是es5中的API Object.defineProperty()对数据进行劫持结合发布者订阅者模式的方式来实现；</li>\n<li>vue3使用的是ES6中的API proxy 进行数据代理</li>\n</ul>\n</li>\n<li><p>vue3支持碎片化节点，组件中可以有多个根节点</p>\n</li>\n<li><p>vue2和vue3使用的API不同</p>\n<ul>\n<li>vue2 使用的是Options API选项形式；</li>\n<li>vue3 使用的是合成型API composition API 组合式API；</li>\n</ul>\n</li>\n<li><p>vue2和vue3它们的生命周期不同</p>\n<ul>\n<li>vue2：<ul>\n<li>beforeCreate</li>\n<li>created</li>\n<li>beforeMunted</li>\n<li>Mounted</li>\n<li>beforeUpdate</li>\n<li>Update</li>\n<li>beforeDestory</li>\n<li>destoryed</li>\n<li>activated</li>\n<li>deactivated</li>\n</ul>\n</li>\n<li>vue3:<ul>\n<li>setup()</li>\n<li>onBeforeMount</li>\n<li>onMouted</li>\n<li>computed</li>\n<li>onBeforeUpdate</li>\n<li>onUpdated</li>\n<li>onBeforeUnmount</li>\n<li>onUnmouted</li>\n<li>onActivated</li>\n<li>onDeactivated</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>它们建立数据方式不同</p>\n<ul>\n<li>vue2: 直接在data中创建</li>\n<li>vue3: 在setup中创建，该组件在组件初始化构建时候触发</li>\n</ul>\n</li>\n<li><p>父子的传参方式不同</p>\n</li>\n<li><p>vue3新增了瞬移组件 teleport</p>\n</li>\n</ul>\n<h3 id=\"Vuex面试题\"><a href=\"#Vuex面试题\" class=\"headerlink\" title=\"Vuex面试题\"></a>Vuex面试题</h3><ul>\n<li><a href=\"https://blog.csdn.net/m0_64346035/article/details/124619717\">vuex面试题</a></li>\n</ul>\n<h3 id=\"nextTick-vue\"><a href=\"#nextTick-vue\" class=\"headerlink\" title=\"nextTick vue\"></a>nextTick vue</h3><ul>\n<li><p>用途：<br>在视图更新之后，基于新的视图进行操作,使用nextTick中的回调函数，在下一次更新DOM更新循环结束之后执行回调</p>\n</li>\n<li><p>为什么使用$nextTick?<br>DOM更新是异步操作，在数据更新完成之后，DOM不会立即更新，而是等同一事件循环中的所有数据变化完成之后，在统一进行视图更新。所以使用$nextTick可以使同步任务在DOM更新完成之后去执行。<br>例如：<br>获取设置输入框由隐藏变为显示，再去获取这个DOM元素就需要使用$nextTick<br>在 created 和 mounted 阶段，如果需要操作渲染后的试图，也要使用 nextTick 方法。<br>注意 mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted</p>\n</li>\n<li><p>原理：事件循环</p>\n</li>\n</ul>\n<h3 id=\"vue-eventBus\"><a href=\"#vue-eventBus\" class=\"headerlink\" title=\"vue eventBus\"></a>vue eventBus</h3><ul>\n<li><p>EventBus 是消息传递的一种方式，基于一个消息中心，订阅和发布消息的模式，称为发布订阅者模式。</p>\n</li>\n<li><p>on 订阅消息 emit 发布消息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lass Bus &#123;</span><br><span class=\"line\">  <span class=\"title\">constructor</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.callbacks = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  $on(name,fn) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.callbacks[name] = []</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.callbacks[name].push(fn)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  $emit(name,args) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span>.callbacks[name])&#123;</span><br><span class=\"line\">       <span class=\"comment\">//存在遍历所有callback</span></span><br><span class=\"line\">       <span class=\"built_in\">this</span>.callbacks[name].forEach(<span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> cb(args))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> EventBus = <span class=\"keyword\">new</span> Bus()</span><br><span class=\"line\">EventBus.$on(<span class=\"string\">&#x27;fn1&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">`订阅的消息是：<span class=\"subst\">$&#123;msg&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">EventBus.$emit(<span class=\"string\">&#x27;fn1&#x27;</span>, <span class=\"string\">&#x27;你好，世界！&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"vue父子组件传值单例问题\"><a href=\"#vue父子组件传值单例问题\" class=\"headerlink\" title=\"vue父子组件传值单例问题\"></a>vue父子组件传值单例问题</h3></li>\n<li><p>数据从父组件传递给子组件，子组件内部不能修改从父级传过来的数据。防止子组件意外改变父组件的状态</p>\n</li>\n</ul>\n<h3 id=\"EventBus-说说你了解的\"><a href=\"#EventBus-说说你了解的\" class=\"headerlink\" title=\"EventBus 说说你了解的\"></a>EventBus 说说你了解的</h3><ul>\n<li><p>如果使用不善，EventBus会是一种灾难，到底是什么样的“灾难”了？大家都知道vue是单页应用，如果你在某一个页面刷新了之后，与之相关的EventBus会被移除，这样就导致业务走不下去。还要就是如果业务有反复操作的页面，EventBus在监听的时候就会触发很多次，也是一个非常大的隐患。这时候我们就需要好好处理EventBus在项目中的关系。通常会用到，在vue页面销毁时，同时移除EventBus事件监听。</p>\n</li>\n<li><p>有三种方法 <code>$emit 用于发送数据</code> <code>$on 用于接受监听数据</code> <code>$off 用于销毁监听事件</code></p>\n</li>\n</ul>\n<h3 id=\"computed和watch的区别\"><a href=\"#computed和watch的区别\" class=\"headerlink\" title=\"computed和watch的区别\"></a>computed和watch的区别</h3><ul>\n<li>computed是一对多，多次调用，把第一次调用的结果放入缓冲，节约性能</li>\n<li>在computed中定义一个函数，看起来是一个函数，其实是一个属性</li>\n</ul>\n<h3 id=\"vue2和vue3的数据双向绑定\"><a href=\"#vue2和vue3的数据双向绑定\" class=\"headerlink\" title=\"vue2和vue3的数据双向绑定\"></a>vue2和vue3的数据双向绑定</h3><ol>\n<li>为什么要做这个改进？ vue2中使用的是ES5 objec.defineProperty 方法 </li>\n</ol>\n<p>vue2</p>\n<ul>\n<li>关于对象：对页面初始化实例中的propery进行getter和setter的转化，所以必须property必须在data对象上存在才能让vue将他转变为响应式的</li>\n<li>关于数组： 当你使用索引值去直接改变数组时，或者当你直接去修改数组的长度时，不能检测数组的变动<br>vue3</li>\n<li>使用了ES6语法Proxy方法 用于定义基本操作的自定义行为,通过Reflect(反射): 对源对象的属性进行操作.</li>\n</ul>\n<h3 id=\"vue3-ref和reactive\"><a href=\"#vue3-ref和reactive\" class=\"headerlink\" title=\"vue3 ref和reactive\"></a>vue3 ref和reactive</h3><ul>\n<li><code>ref</code> 用来定义响应式数据的（可以是基本类型也可以是引用类型）</li>\n<li><code>reactive</code> 定义一个对象类型的响应式数据，基本数据类型还是使用ref</li>\n<li><code>ref</code> 通过Object.defineProperty 中的get和set实现数据劫持（响应式）</li>\n<li><code>reactive</code> 通过proxy 数据代理的方式去实现数据的响应式，并且使用reflect 来操作源对象内部的数据</li>\n</ul>\n","categories":[{"name":"面试题","path":"api/categories/面试题.json"}],"tags":[]}