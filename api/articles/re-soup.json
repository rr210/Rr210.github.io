{"title":"Python爬虫库xPath, BeautifulSoup, re, selenium的详细用法","slug":"re-soup","date":"2021-08-22T02:34:06.000Z","updated":"2021-09-10T05:19:47.116Z","comments":true,"path":"api/articles/re-soup.json","excerpt":null,"covers":["https://gitee.com/rbozo/picgo_image/raw/master/image/0/20210822143150.png","https://gitee.com/rbozo/picgo_image/raw/master/image/0/20210822191052.png","https://gitee.com/rbozo/picgo_image/raw/master/image/0/20210822182351.png","https://gitee.com/rbozo/picgo_image/raw/master/image/0/20210822185037.png"],"content":"<h2 id=\"项目代码展示\"><a href=\"#项目代码展示\" class=\"headerlink\" title=\"项目代码展示\"></a>项目代码展示</h2><p><img src=\"https://gitee.com/rbozo/picgo_image/raw/master/image/0/20210822143150.png\" alt=\"部分代码\"></p>\n<ul>\n<li>项目部署方法, 已发GitHub, 项目地址<a href=\"https://github.com/Rr210/hot_search\">github地址</a></li>\n</ul>\n<h2 id=\"使用技术\"><a href=\"#使用技术\" class=\"headerlink\" title=\"使用技术\"></a>使用技术</h2><ul>\n<li>python正则匹配</li>\n<li>Beautifulsoup4库</li>\n<li>xpath解析</li>\n</ul>\n<h2 id=\"正则匹配\"><a href=\"#正则匹配\" class=\"headerlink\" title=\"正则匹配\"></a>正则匹配</h2><ul>\n<li>和JavaScript语言匹配方式类似</li>\n<li>使用前需导入<code>re</code>包</li>\n<li>有几种正则匹配的方法:match, search, compile, findall, finditer</li>\n</ul>\n<h3 id=\"re-match-a-b-c\"><a href=\"#re-match-a-b-c\" class=\"headerlink\" title=\"re.match(a, b, c)\"></a>re.match(a, b, c)</h3><ul>\n<li>三个参数: 匹配的规则, 要匹配的字符串, 匹配方式</li>\n<li>它是从字符串的第一个位置进行匹配如果满足使用<code>.span()</code>方法可以返回它所在的索引位置, 如果不满足则返回<code>None</code></li>\n<li><code>返回结果.groups()</code>返回一个包含所有小组的字符串的元组, 使用<code>group(num)</code>方法可以返回一个包含对应值的元组(从1开始)</li>\n</ul>\n<h3 id=\"re-search-a-b-c\"><a href=\"#re-search-a-b-c\" class=\"headerlink\" title=\"re.search(a, b, c)\"></a>re.search(a, b, c)</h3><ul>\n<li>也是三个参数, 与上面相同</li>\n<li>获取元组方法也相同, 唯一的不同点就是, search不是从一开始进行匹配, 而是如果字符串中包含所要匹配的内容, 则返回第一个匹配成功的</li>\n<li>注意只返回一个不是多个</li>\n</ul>\n<h3 id=\"re-sub-a-b-c-d-e\"><a href=\"#re-sub-a-b-c-d-e\" class=\"headerlink\" title=\"re.sub(a, b, c, d, e)\"></a>re.sub(a, b, c, d, e)</h3><ul>\n<li>执行<code>替换</code>操作</li>\n<li><code>a</code>正则中的模式字符串</li>\n<li><code>b</code>要替换的字符串, 也可以是一个函数</li>\n<li><code>c</code>原始字符串</li>\n<li><code>d</code>匹配后替换的最大次数, 默认是0表示全部匹配替换</li>\n<li><code>e</code>匹配模式, 数字形式</li>\n</ul>\n<h3 id=\"re-compile-a-b\"><a href=\"#re-compile-a-b\" class=\"headerlink\" title=\"re.compile(a, b)\"></a>re.compile(a, b)</h3><ul>\n<li>用来编译正则表达式, 供match和search这两个函数使用</li>\n<li>如果使用的是match方法 在获取匹配的字符时使用group方法获取参数可以省略不写也可以写0</li>\n<li>group方法参数的数值与你所写的正则表达式元组数有关</li>\n<li>start, end, span方法都是返回匹配字符在原字符串中所在的索引位置</li>\n</ul>\n<h3 id=\"findall-a-b-c-d\"><a href=\"#findall-a-b-c-d\" class=\"headerlink\" title=\"findall(a, b, c, d)\"></a>findall(a, b, c, d)</h3><ul>\n<li>参数分别表示: 正则表达式, 匹配的字符串, 指定匹配的起始位置, 结束位置</li>\n<li>返回满足条件的所有子串, 列表的形式, 如不则返回空列表</li>\n<li>如果由有元组则返回满足元组规则的字符 可进行遍历</li>\n</ul>\n<h3 id=\"finditer-a-b-c\"><a href=\"#finditer-a-b-c\" class=\"headerlink\" title=\"finditer(a, b, c)\"></a>finditer(a, b, c)</h3><ul>\n<li>参数分别为: 匹配规则, 匹配的字符串, 匹配模式</li>\n<li>和findall方法类似, 返回值使用迭代器方式返回使用<code>for in</code>方法</li>\n</ul>\n<h3 id=\"re-split-a-b-c-d\"><a href=\"#re-split-a-b-c-d\" class=\"headerlink\" title=\"re.split(a, b, c, d)\"></a>re.split(a, b, c, d)</h3><ul>\n<li>按照匹配规则将匹配的字符串进行分隔以列表的形式返回</li>\n<li>参数分别为: 匹配规则, 匹配字符, <code>切割次数默认为0, 不限制次数</code>, 匹配模式</li>\n</ul>\n<h3 id=\"正则表达式修饰符\"><a href=\"#正则表达式修饰符\" class=\"headerlink\" title=\"正则表达式修饰符\"></a>正则表达式修饰符</h3><ul>\n<li><code>re.I</code> 是匹配时大小写不敏感</li>\n<li><code>re.L</code> 做本地化识别</li>\n<li><code>re.S</code> 使. 匹配包括换行在内的所有字符</li>\n<li><code>re.M</code> 多行匹配影响^$</li>\n<li><code>re.U</code> 根据Unicode字符集解析字符. 这个标志影响 \\w, \\W, \\b, \\B.</li>\n<li><code>re.X</code> 该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解.</li>\n</ul>\n<p>【<a href=\"https://blog.csdn.net/weixin_43347550/article/details/105158003\">Python正则表达式详解 (超详细, 看完必会!)</a>】</p>\n<h2 id=\"xPath方法\"><a href=\"#xPath方法\" class=\"headerlink\" title=\"xPath方法\"></a>xPath方法</h2><ul>\n<li>使用之前先安装好lxml库<code>pip i lxml</code></li>\n<li>xPath使用路径表达式在XML文档中进行导航</li>\n<li>可以对本地的html文件进行解析也可以直接对html字符串进行解析</li>\n</ul>\n<h3 id=\"Xpath常用的规则\"><a href=\"#Xpath常用的规则\" class=\"headerlink\" title=\"Xpath常用的规则\"></a>Xpath常用的规则</h3><ul>\n<li><code>nodename</code>选取所有的子节点</li>\n<li><code>/</code>选取当前节点下的子节点</li>\n<li><code>//</code>选取当前节点的子孙节点</li>\n<li><code>.</code> 选取当前节点</li>\n<li><code>..</code> 选取当前节点的父节点</li>\n<li><code>@</code>选取属性</li>\n</ul>\n<h3 id=\"本地展示\"><a href=\"#本地展示\" class=\"headerlink\" title=\"本地展示\"></a>本地展示</h3><p><img src=\"https://gitee.com/rbozo/picgo_image/raw/master/image/0/20210822191052.png\" alt=\"以下代码中用到该实例\"></p>\n<!-- 两种方法解析本地文件 -->\n<ul>\n<li>第一种使用<code>etree.parse</code>方法解析本地</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding= utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> lxml <span class=\"keyword\">import</span> etree</span><br><span class=\"line\">html = etree.parse(<span class=\"string\">&#x27;./index.html&#x27;</span>,etree.HTMLParser())</span><br><span class=\"line\">print(etree.tostring(html))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第二种方法使用 <code>etree.HTML</code> 方法</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding= utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> lxml <span class=\"keyword\">import</span> etree</span><br><span class=\"line\">fp = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./index.html&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>)</span><br><span class=\"line\">html = fp.read().decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)  </span><br><span class=\"line\">selector = etree.HTML(html)   <span class=\"comment\">#etree.HTML(源码) 识别为可被xpath解析的对象</span></span><br><span class=\"line\">print(selector)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>匹配所有的节点 使用<code>//*</code>规则匹配</li>\n<li>匹配所有指定的节点使用<code>//节点名称</code></li>\n<li>匹配所有的子节点将//换成<code>/</code></li>\n<li>获取父节点属性值的方法 <code>../@属性名</code></li>\n<li>属性匹配可以使用<code>@属性名</code>的方法</li>\n<li>文本获取两种方法 <code>/text()</code> 和 <code>//text()</code>, 区别第一种直接获取文本, 第二种要获取换行时产生的特殊字符</li>\n<li>属性获取使用<code>/@href</code>获取</li>\n<li>获取属性中包含多个值的情况 属性多值匹配 <code>contains()</code>方法</li>\n<li>多属性匹配, 使用and运算符 和contains方法搭配使用</li>\n</ul>\n<h3 id=\"xPath运算符\"><a href=\"#xPath运算符\" class=\"headerlink\" title=\"xPath运算符\"></a>xPath运算符</h3><ul>\n<li>除号和取余特殊, 其他的都与基本运算符一直</li>\n<li>除号使用<code>div</code>  比如<code>8 div 4</code></li>\n<li>取余则是<code>mod</code> 比如<code>1 mod 2</code></li>\n<li>还有表示并列和或者的 <code>and</code> 和 <code>or</code></li>\n</ul>\n<h3 id=\"按序选择\"><a href=\"#按序选择\" class=\"headerlink\" title=\"按序选择\"></a>按序选择</h3><ul>\n<li>xPath内置了100多种函数方法, 具体参考【<a href=\"http://www.w3school.com.cn/xpath/xpath_functions.asp\">xPath函数</a>】</li>\n</ul>\n<p><img src=\"https://gitee.com/rbozo/picgo_image/raw/master/image/0/20210822182351.png\" alt=\"按序\"></p>\n<h3 id=\"节点轴选择\"><a href=\"#节点轴选择\" class=\"headerlink\" title=\"节点轴选择\"></a>节点轴选择</h3><ul>\n<li>获取当前节点所有子元素的<code>a</code>节点的<code>href</code>属性值 <code>child::a/@href</code></li>\n<li>获取当前节点的指定元素的属性值 <code>attribute:: 属性名</code></li>\n<li>获取当前节点的所有的子元素 <code>child::*</code></li>\n<li>获取当前节点 的所有属性的属性值 <code>attribute::*</code></li>\n<li>获取当前节点所有子节点 <code>child::node()</code></li>\n<li>获取当前元素所有文本子节点 <code>child::text()</code></li>\n<li>获取当前元素的所有父辈为li元素的节点(包括当前元素) <code>ancestor-or-self:: 元素</code></li>\n</ul>\n<p><a href=\"https://www.w3school.com.cn/xpath/xpath_axes.asp\">xPath轴</a><br><a href=\"https://blog.csdn.net/Ryan_lee9410/article/details/107144213\">xPath避坑指南</a></p>\n<p><img src=\"https://gitee.com/rbozo/picgo_image/raw/master/image/0/20210822185037.png\" alt=\"xPath轴\"></p>\n<h3 id=\"演示代码\"><a href=\"#演示代码\" class=\"headerlink\" title=\"演示代码\"></a>演示代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding= utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> lxml <span class=\"keyword\">import</span> etree</span><br><span class=\"line\"><span class=\"comment\"># fp = open(&#x27;./index.html&#x27;, &#x27;rb&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># html = fp.read().decode(&#x27;utf-8&#x27;)   #.decode(&#x27;gbk&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># selector = etree.HTML(html)   #etree.HTML(源码) 识别为可被xpath解析的对象</span></span><br><span class=\"line\"><span class=\"comment\"># print(selector)</span></span><br><span class=\"line\"></span><br><span class=\"line\">html = etree.parse(<span class=\"string\">&#x27;./index.html&#x27;</span>,etree.HTMLParser())</span><br><span class=\"line\"><span class=\"comment\"># print(etree.tostring(html).decode(&#x27;utf-8&#x27;))</span></span><br><span class=\"line\"></span><br><span class=\"line\">all_node = html.xpath(<span class=\"string\">&#x27;//*&#x27;</span>)  <span class=\"comment\"># 所有节点的获取 //*</span></span><br><span class=\"line\">part_node = html.xpath(<span class=\"string\">&#x27;//li&#x27;</span>)  <span class=\"comment\"># 部分节点 格式：//节点名</span></span><br><span class=\"line\">child_node = html.xpath(<span class=\"string\">&#x27;//li/a&#x27;</span>)  <span class=\"comment\"># 匹配子节点</span></span><br><span class=\"line\">parent_node = html.xpath(<span class=\"string\">&#x27;//a[@href=&quot;//mr90.top&quot;]/../@class&#x27;</span>)  <span class=\"comment\"># 获取父节点属性值的方法 ../@属性名</span></span><br><span class=\"line\">attrs_node = html.xpath(<span class=\"string\">&#x27;//a[contains(@class,&quot;a&quot;)]/text()&#x27;</span>)   <span class=\"comment\"># 获取属性中包含多个值的情况 属性多值匹配 contains()方法</span></span><br><span class=\"line\"><span class=\"comment\"># 按序获取</span></span><br><span class=\"line\">first_node = html.xpath(<span class=\"string\">&#x27;//li[1]/a/text()&#x27;</span>)  <span class=\"comment\"># 获取第一个</span></span><br><span class=\"line\">last_node = html.xpath(<span class=\"string\">&#x27;//li[last()]//text()&#x27;</span>)   <span class=\"comment\"># 获取最后一个节点</span></span><br><span class=\"line\">front_node = html.xpath(<span class=\"string\">&#x27;//li[position()&lt;3]//text()&#x27;</span>)    <span class=\"comment\"># 获取前两个节点</span></span><br><span class=\"line\">end_ndoe = html.xpath(<span class=\"string\">&#x27;//li[last()-2]//text()&#x27;</span>)   <span class=\"comment\"># 获取到数第三个节点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 轴节点</span></span><br><span class=\"line\">child_node_z = html.xpath(<span class=\"string\">&#x27;//li[position()&lt;2]/child::a/@href&#x27;</span>)  <span class=\"comment\"># 获取当前节点所有子元素的a节点的href属性值</span></span><br><span class=\"line\">attribute_node = html.xpath(<span class=\"string\">&#x27;//li[2]//attribute::lang&#x27;</span>)  <span class=\"comment\"># 获取当前节点的指定元素的属性值</span></span><br><span class=\"line\">all_child_node = html.xpath(<span class=\"string\">&#x27;//ul/li[last()-1]//child::*&#x27;</span>)  <span class=\"comment\"># 获取当前节点的所有的文本节点</span></span><br><span class=\"line\">all_attrs_node = html.xpath(<span class=\"string\">&#x27;//li[1]/a/attribute::*&#x27;</span>)  <span class=\"comment\"># 获取当前节点 的所有属性的属性值</span></span><br><span class=\"line\">all_child_text_node = html.xpath(<span class=\"string\">&#x27;//li[1]//child::text()&#x27;</span>)  <span class=\"comment\"># 获取当前节点所有文本子节点</span></span><br><span class=\"line\">all_child_node_node = html.xpath(<span class=\"string\">&#x27;//li[1]/a/child::node()&#x27;</span>)  <span class=\"comment\"># 获取当前节点所有子元素</span></span><br><span class=\"line\">ancestor_self = html.xpath(<span class=\"string\">&#x27;//a[@title=&quot;1&quot;]/../ancestor-or-self::li&#x27;</span>) <span class=\"comment\"># 获取当前元素的所有父辈为li元素的节点（包括当前元素）</span></span><br><span class=\"line\">print(ancestor_self)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Beautifulsoup4使用\"><a href=\"#Beautifulsoup4使用\" class=\"headerlink\" title=\"Beautifulsoup4使用\"></a>Beautifulsoup4使用</h2><ul>\n<li><code>Beautiful Soup</code>自动将输入文档转换为Unicode编码, 输出文档转换为utf-8编码</li>\n<li>使用前安装 <code>pip install beautifulsoup4</code></li>\n<li>引入<code>from bs4 import Beautifulsoup4</code></li>\n</ul>\n<h3 id=\"获取内容\"><a href=\"#获取内容\" class=\"headerlink\" title=\"获取内容\"></a>获取内容</h3><ul>\n<li>标签有两个重要的属性name, attrs</li>\n<li>文本内容的获取有三种方法</li>\n<li><code>.string</code>方法返回一个迭代器</li>\n<li><code>.text</code>方法返回节点文本</li>\n<li><code>.get_text()</code>方法返回节点文本</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 获取标题对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(soup.title)  <span class=\"comment\"># &lt;title&gt;xPath方法&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># 获取标题内容</span></span><br><span class=\"line\">print(soup.title.string)  <span class=\"comment\"># 返回迭代器</span></span><br><span class=\"line\">print(soup.title.text)</span><br><span class=\"line\">print(soup.title.get_text())</span><br><span class=\"line\">print(soup.find(<span class=\"string\">&#x27;title&#x27;</span>).get_text())</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过上下级获得对象</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># print(soup.title.parent)   # 返回父节点包括父节点中的内容</span></span><br><span class=\"line\">print(soup.li.child)  <span class=\"comment\"># Node</span></span><br><span class=\"line\">print(soup.li.children)  <span class=\"comment\"># 返回一个迭代器</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取第一个li标签\"><a href=\"#获取第一个li标签\" class=\"headerlink\" title=\"获取第一个li标签\"></a>获取第一个li标签</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(soup.li.get_text())  <span class=\"comment\"># 匹配到第一个，返回所有节点的文本信息</span></span><br><span class=\"line\">print(soup.find(<span class=\"string\">&#x27;li&#x27;</span>).text)</span><br><span class=\"line\"><span class=\"comment\"># 获取ul的子标签们   (空行也看成了一个children)</span></span><br><span class=\"line\">print(soup.ul.children)</span><br><span class=\"line\"><span class=\"keyword\">for</span> index, item <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(soup.ul.children):</span><br><span class=\"line\">    print(index, item)</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取元素的属性\"><a href=\"#获取元素的属性\" class=\"headerlink\" title=\"获取元素的属性\"></a>获取元素的属性</h3><ul>\n<li>使用 <code>.属性名</code> 的方法, 但是只能获取到一个</li>\n<li>使用<code>元素.attrs[&#39;属性名&#39;]</code>的方法返回的时一个列表</li>\n<li>如果使用两次 <code>soup.元素</code> 第一次获取的是匹配到的第一个元素, 第二次是匹配到的第二个元素</li>\n</ul>\n<h3 id=\"获取多个元素\"><a href=\"#获取多个元素\" class=\"headerlink\" title=\"获取多个元素\"></a>获取多个元素</h3><ul>\n<li>find方法获取一个元素</li>\n<li>find_all获取多个元素, 可以加上<code>limit</code>来达到限制个数的问题,  <code>recursive = True</code> 寻找子孙 ; <code>recursive = False</code>只找子</li>\n<li>多层级查找 find_all返回的是一个列表 可以遍历该列表再次使用find方法或者find_all方法 进行元素的获取</li>\n</ul>\n<h3 id=\"通过指定的属性-获取对象\"><a href=\"#通过指定的属性-获取对象\" class=\"headerlink\" title=\"通过指定的属性, 获取对象\"></a>通过指定的属性, 获取对象</h3><ul>\n<li>id和class选择器, class比较特殊, 因为是关键字 在使用class时改成<code>class_</code></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(soup.find(<span class=\"built_in\">id</span>=<span class=\"string\">&#x27;a&#x27;</span>))</span><br><span class=\"line\">print(soup.find(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"built_in\">id</span>=<span class=\"string\">&#x27;a&#x27;</span>))</span><br><span class=\"line\">print(soup.find_all(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"built_in\">id</span>=<span class=\"string\">&#x27;a&#x27;</span>))  <span class=\"comment\"># 可以使用下标查询</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># class是关键字 要这么写class_</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;class1&#x27;</span>, soup.find_all(<span class=\"string\">&#x27;a&#x27;</span>, class_=<span class=\"string\">&#x27;a&#x27;</span>))</span><br><span class=\"line\">print(<span class=\"string\">&#x27;class2&#x27;</span>, soup.find_all(<span class=\"string\">&#x27;a&#x27;</span>, attrs=&#123;<span class=\"string\">&#x27;class&#x27;</span>: <span class=\"string\">&#x27;item&#x27;</span>&#125;))  <span class=\"comment\"># 更通用</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;class3&#x27;</span>, soup.find_all(<span class=\"string\">&#x27;a&#x27;</span>, attrs=&#123;<span class=\"string\">&#x27;class&#x27;</span>: <span class=\"string\">&#x27;item&#x27;</span>, <span class=\"string\">&#x27;id&#x27;</span>: <span class=\"string\">&#x27;a&#x27;</span>&#125;))  <span class=\"comment\"># 多条件</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用函数作为参数-返回元素\"><a href=\"#使用函数作为参数-返回元素\" class=\"headerlink\" title=\"使用函数作为参数, 返回元素\"></a>使用函数作为参数, 返回元素</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">judgeTilte1</span>(<span class=\"params\">t</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> t == <span class=\"string\">&#x27;a&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(soup.find_all(class_=judgeTilte1))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>根据长度来判断</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 判断长度</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re  <span class=\"comment\"># 正则表达式</span></span><br><span class=\"line\">reg = re.<span class=\"built_in\">compile</span>(<span class=\"string\">&quot;item&quot;</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">judgeTilte2</span>(<span class=\"params\">t</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># 返回长度为5，且包含&#x27;item&#x27;的t参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(<span class=\"built_in\">str</span>(t)) == <span class=\"number\">5</span> <span class=\"keyword\">and</span> <span class=\"built_in\">bool</span>(re.search(reg, t))</span><br><span class=\"line\">print(soup.find_all(class_=judgeTilte2))</span><br></pre></td></tr></table></figure>\n<h3 id=\"可以使用css选择器\"><a href=\"#可以使用css选择器\" class=\"headerlink\" title=\"可以使用css选择器\"></a>可以使用css选择器</h3><ul>\n<li>select方法返回的都是一个列表</li>\n<li>可以通过标签名查找, 属性查找, 标签+类名+id, 组合查找</li>\n</ul>\n<p><a href=\"https://blog.csdn.net/qq_21933615/article/details/81171951\">Python中BeautifulSoup库的用法</a><br><a href=\"https://blog.csdn.net/love666666shen/article/details/77512353\">python beautiful soup库的超详细用法</a><br><a href=\"https://blog.csdn.net/IT_arookie/article/details/82824620\">python 爬虫 提取文本之BeautifulSoup详细用法</a></p>\n","more":"<h2 id=\"项目代码展示\"><a href=\"#项目代码展示\" class=\"headerlink\" title=\"项目代码展示\"></a>项目代码展示</h2><p><img src=\"https://gitee.com/rbozo/picgo_image/raw/master/image/0/20210822143150.png\" alt=\"部分代码\"></p>\n<ul>\n<li>项目部署方法, 已发GitHub, 项目地址<a href=\"https://github.com/Rr210/hot_search\">github地址</a></li>\n</ul>\n<h2 id=\"使用技术\"><a href=\"#使用技术\" class=\"headerlink\" title=\"使用技术\"></a>使用技术</h2><ul>\n<li>python正则匹配</li>\n<li>Beautifulsoup4库</li>\n<li>xpath解析</li>\n</ul>\n<h2 id=\"正则匹配\"><a href=\"#正则匹配\" class=\"headerlink\" title=\"正则匹配\"></a>正则匹配</h2><ul>\n<li>和JavaScript语言匹配方式类似</li>\n<li>使用前需导入<code>re</code>包</li>\n<li>有几种正则匹配的方法:match, search, compile, findall, finditer</li>\n</ul>\n<h3 id=\"re-match-a-b-c\"><a href=\"#re-match-a-b-c\" class=\"headerlink\" title=\"re.match(a, b, c)\"></a>re.match(a, b, c)</h3><ul>\n<li>三个参数: 匹配的规则, 要匹配的字符串, 匹配方式</li>\n<li>它是从字符串的第一个位置进行匹配如果满足使用<code>.span()</code>方法可以返回它所在的索引位置, 如果不满足则返回<code>None</code></li>\n<li><code>返回结果.groups()</code>返回一个包含所有小组的字符串的元组, 使用<code>group(num)</code>方法可以返回一个包含对应值的元组(从1开始)</li>\n</ul>\n<h3 id=\"re-search-a-b-c\"><a href=\"#re-search-a-b-c\" class=\"headerlink\" title=\"re.search(a, b, c)\"></a>re.search(a, b, c)</h3><ul>\n<li>也是三个参数, 与上面相同</li>\n<li>获取元组方法也相同, 唯一的不同点就是, search不是从一开始进行匹配, 而是如果字符串中包含所要匹配的内容, 则返回第一个匹配成功的</li>\n<li>注意只返回一个不是多个</li>\n</ul>\n<h3 id=\"re-sub-a-b-c-d-e\"><a href=\"#re-sub-a-b-c-d-e\" class=\"headerlink\" title=\"re.sub(a, b, c, d, e)\"></a>re.sub(a, b, c, d, e)</h3><ul>\n<li>执行<code>替换</code>操作</li>\n<li><code>a</code>正则中的模式字符串</li>\n<li><code>b</code>要替换的字符串, 也可以是一个函数</li>\n<li><code>c</code>原始字符串</li>\n<li><code>d</code>匹配后替换的最大次数, 默认是0表示全部匹配替换</li>\n<li><code>e</code>匹配模式, 数字形式</li>\n</ul>\n<h3 id=\"re-compile-a-b\"><a href=\"#re-compile-a-b\" class=\"headerlink\" title=\"re.compile(a, b)\"></a>re.compile(a, b)</h3><ul>\n<li>用来编译正则表达式, 供match和search这两个函数使用</li>\n<li>如果使用的是match方法 在获取匹配的字符时使用group方法获取参数可以省略不写也可以写0</li>\n<li>group方法参数的数值与你所写的正则表达式元组数有关</li>\n<li>start, end, span方法都是返回匹配字符在原字符串中所在的索引位置</li>\n</ul>\n<h3 id=\"findall-a-b-c-d\"><a href=\"#findall-a-b-c-d\" class=\"headerlink\" title=\"findall(a, b, c, d)\"></a>findall(a, b, c, d)</h3><ul>\n<li>参数分别表示: 正则表达式, 匹配的字符串, 指定匹配的起始位置, 结束位置</li>\n<li>返回满足条件的所有子串, 列表的形式, 如不则返回空列表</li>\n<li>如果由有元组则返回满足元组规则的字符 可进行遍历</li>\n</ul>\n<h3 id=\"finditer-a-b-c\"><a href=\"#finditer-a-b-c\" class=\"headerlink\" title=\"finditer(a, b, c)\"></a>finditer(a, b, c)</h3><ul>\n<li>参数分别为: 匹配规则, 匹配的字符串, 匹配模式</li>\n<li>和findall方法类似, 返回值使用迭代器方式返回使用<code>for in</code>方法</li>\n</ul>\n<h3 id=\"re-split-a-b-c-d\"><a href=\"#re-split-a-b-c-d\" class=\"headerlink\" title=\"re.split(a, b, c, d)\"></a>re.split(a, b, c, d)</h3><ul>\n<li>按照匹配规则将匹配的字符串进行分隔以列表的形式返回</li>\n<li>参数分别为: 匹配规则, 匹配字符, <code>切割次数默认为0, 不限制次数</code>, 匹配模式</li>\n</ul>\n<h3 id=\"正则表达式修饰符\"><a href=\"#正则表达式修饰符\" class=\"headerlink\" title=\"正则表达式修饰符\"></a>正则表达式修饰符</h3><ul>\n<li><code>re.I</code> 是匹配时大小写不敏感</li>\n<li><code>re.L</code> 做本地化识别</li>\n<li><code>re.S</code> 使. 匹配包括换行在内的所有字符</li>\n<li><code>re.M</code> 多行匹配影响^$</li>\n<li><code>re.U</code> 根据Unicode字符集解析字符. 这个标志影响 \\w, \\W, \\b, \\B.</li>\n<li><code>re.X</code> 该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解.</li>\n</ul>\n<p>【<a href=\"https://blog.csdn.net/weixin_43347550/article/details/105158003\">Python正则表达式详解 (超详细, 看完必会!)</a>】</p>\n<h2 id=\"xPath方法\"><a href=\"#xPath方法\" class=\"headerlink\" title=\"xPath方法\"></a>xPath方法</h2><ul>\n<li>使用之前先安装好lxml库<code>pip i lxml</code></li>\n<li>xPath使用路径表达式在XML文档中进行导航</li>\n<li>可以对本地的html文件进行解析也可以直接对html字符串进行解析</li>\n</ul>\n<h3 id=\"Xpath常用的规则\"><a href=\"#Xpath常用的规则\" class=\"headerlink\" title=\"Xpath常用的规则\"></a>Xpath常用的规则</h3><ul>\n<li><code>nodename</code>选取所有的子节点</li>\n<li><code>/</code>选取当前节点下的子节点</li>\n<li><code>//</code>选取当前节点的子孙节点</li>\n<li><code>.</code> 选取当前节点</li>\n<li><code>..</code> 选取当前节点的父节点</li>\n<li><code>@</code>选取属性</li>\n</ul>\n<h3 id=\"本地展示\"><a href=\"#本地展示\" class=\"headerlink\" title=\"本地展示\"></a>本地展示</h3><p><img src=\"https://gitee.com/rbozo/picgo_image/raw/master/image/0/20210822191052.png\" alt=\"以下代码中用到该实例\"></p>\n<!-- 两种方法解析本地文件 -->\n<ul>\n<li>第一种使用<code>etree.parse</code>方法解析本地</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding= utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> lxml <span class=\"keyword\">import</span> etree</span><br><span class=\"line\">html = etree.parse(<span class=\"string\">&#x27;./index.html&#x27;</span>,etree.HTMLParser())</span><br><span class=\"line\">print(etree.tostring(html))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第二种方法使用 <code>etree.HTML</code> 方法</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding= utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> lxml <span class=\"keyword\">import</span> etree</span><br><span class=\"line\">fp = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./index.html&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>)</span><br><span class=\"line\">html = fp.read().decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)  </span><br><span class=\"line\">selector = etree.HTML(html)   <span class=\"comment\">#etree.HTML(源码) 识别为可被xpath解析的对象</span></span><br><span class=\"line\">print(selector)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>匹配所有的节点 使用<code>//*</code>规则匹配</li>\n<li>匹配所有指定的节点使用<code>//节点名称</code></li>\n<li>匹配所有的子节点将//换成<code>/</code></li>\n<li>获取父节点属性值的方法 <code>../@属性名</code></li>\n<li>属性匹配可以使用<code>@属性名</code>的方法</li>\n<li>文本获取两种方法 <code>/text()</code> 和 <code>//text()</code>, 区别第一种直接获取文本, 第二种要获取换行时产生的特殊字符</li>\n<li>属性获取使用<code>/@href</code>获取</li>\n<li>获取属性中包含多个值的情况 属性多值匹配 <code>contains()</code>方法</li>\n<li>多属性匹配, 使用and运算符 和contains方法搭配使用</li>\n</ul>\n<h3 id=\"xPath运算符\"><a href=\"#xPath运算符\" class=\"headerlink\" title=\"xPath运算符\"></a>xPath运算符</h3><ul>\n<li>除号和取余特殊, 其他的都与基本运算符一直</li>\n<li>除号使用<code>div</code>  比如<code>8 div 4</code></li>\n<li>取余则是<code>mod</code> 比如<code>1 mod 2</code></li>\n<li>还有表示并列和或者的 <code>and</code> 和 <code>or</code></li>\n</ul>\n<h3 id=\"按序选择\"><a href=\"#按序选择\" class=\"headerlink\" title=\"按序选择\"></a>按序选择</h3><ul>\n<li>xPath内置了100多种函数方法, 具体参考【<a href=\"http://www.w3school.com.cn/xpath/xpath_functions.asp\">xPath函数</a>】</li>\n</ul>\n<p><img src=\"https://gitee.com/rbozo/picgo_image/raw/master/image/0/20210822182351.png\" alt=\"按序\"></p>\n<h3 id=\"节点轴选择\"><a href=\"#节点轴选择\" class=\"headerlink\" title=\"节点轴选择\"></a>节点轴选择</h3><ul>\n<li>获取当前节点所有子元素的<code>a</code>节点的<code>href</code>属性值 <code>child::a/@href</code></li>\n<li>获取当前节点的指定元素的属性值 <code>attribute:: 属性名</code></li>\n<li>获取当前节点的所有的子元素 <code>child::*</code></li>\n<li>获取当前节点 的所有属性的属性值 <code>attribute::*</code></li>\n<li>获取当前节点所有子节点 <code>child::node()</code></li>\n<li>获取当前元素所有文本子节点 <code>child::text()</code></li>\n<li>获取当前元素的所有父辈为li元素的节点(包括当前元素) <code>ancestor-or-self:: 元素</code></li>\n</ul>\n<p><a href=\"https://www.w3school.com.cn/xpath/xpath_axes.asp\">xPath轴</a><br><a href=\"https://blog.csdn.net/Ryan_lee9410/article/details/107144213\">xPath避坑指南</a></p>\n<p><img src=\"https://gitee.com/rbozo/picgo_image/raw/master/image/0/20210822185037.png\" alt=\"xPath轴\"></p>\n<h3 id=\"演示代码\"><a href=\"#演示代码\" class=\"headerlink\" title=\"演示代码\"></a>演示代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding= utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> lxml <span class=\"keyword\">import</span> etree</span><br><span class=\"line\"><span class=\"comment\"># fp = open(&#x27;./index.html&#x27;, &#x27;rb&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># html = fp.read().decode(&#x27;utf-8&#x27;)   #.decode(&#x27;gbk&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># selector = etree.HTML(html)   #etree.HTML(源码) 识别为可被xpath解析的对象</span></span><br><span class=\"line\"><span class=\"comment\"># print(selector)</span></span><br><span class=\"line\"></span><br><span class=\"line\">html = etree.parse(<span class=\"string\">&#x27;./index.html&#x27;</span>,etree.HTMLParser())</span><br><span class=\"line\"><span class=\"comment\"># print(etree.tostring(html).decode(&#x27;utf-8&#x27;))</span></span><br><span class=\"line\"></span><br><span class=\"line\">all_node = html.xpath(<span class=\"string\">&#x27;//*&#x27;</span>)  <span class=\"comment\"># 所有节点的获取 //*</span></span><br><span class=\"line\">part_node = html.xpath(<span class=\"string\">&#x27;//li&#x27;</span>)  <span class=\"comment\"># 部分节点 格式：//节点名</span></span><br><span class=\"line\">child_node = html.xpath(<span class=\"string\">&#x27;//li/a&#x27;</span>)  <span class=\"comment\"># 匹配子节点</span></span><br><span class=\"line\">parent_node = html.xpath(<span class=\"string\">&#x27;//a[@href=&quot;//mr90.top&quot;]/../@class&#x27;</span>)  <span class=\"comment\"># 获取父节点属性值的方法 ../@属性名</span></span><br><span class=\"line\">attrs_node = html.xpath(<span class=\"string\">&#x27;//a[contains(@class,&quot;a&quot;)]/text()&#x27;</span>)   <span class=\"comment\"># 获取属性中包含多个值的情况 属性多值匹配 contains()方法</span></span><br><span class=\"line\"><span class=\"comment\"># 按序获取</span></span><br><span class=\"line\">first_node = html.xpath(<span class=\"string\">&#x27;//li[1]/a/text()&#x27;</span>)  <span class=\"comment\"># 获取第一个</span></span><br><span class=\"line\">last_node = html.xpath(<span class=\"string\">&#x27;//li[last()]//text()&#x27;</span>)   <span class=\"comment\"># 获取最后一个节点</span></span><br><span class=\"line\">front_node = html.xpath(<span class=\"string\">&#x27;//li[position()&lt;3]//text()&#x27;</span>)    <span class=\"comment\"># 获取前两个节点</span></span><br><span class=\"line\">end_ndoe = html.xpath(<span class=\"string\">&#x27;//li[last()-2]//text()&#x27;</span>)   <span class=\"comment\"># 获取到数第三个节点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 轴节点</span></span><br><span class=\"line\">child_node_z = html.xpath(<span class=\"string\">&#x27;//li[position()&lt;2]/child::a/@href&#x27;</span>)  <span class=\"comment\"># 获取当前节点所有子元素的a节点的href属性值</span></span><br><span class=\"line\">attribute_node = html.xpath(<span class=\"string\">&#x27;//li[2]//attribute::lang&#x27;</span>)  <span class=\"comment\"># 获取当前节点的指定元素的属性值</span></span><br><span class=\"line\">all_child_node = html.xpath(<span class=\"string\">&#x27;//ul/li[last()-1]//child::*&#x27;</span>)  <span class=\"comment\"># 获取当前节点的所有的文本节点</span></span><br><span class=\"line\">all_attrs_node = html.xpath(<span class=\"string\">&#x27;//li[1]/a/attribute::*&#x27;</span>)  <span class=\"comment\"># 获取当前节点 的所有属性的属性值</span></span><br><span class=\"line\">all_child_text_node = html.xpath(<span class=\"string\">&#x27;//li[1]//child::text()&#x27;</span>)  <span class=\"comment\"># 获取当前节点所有文本子节点</span></span><br><span class=\"line\">all_child_node_node = html.xpath(<span class=\"string\">&#x27;//li[1]/a/child::node()&#x27;</span>)  <span class=\"comment\"># 获取当前节点所有子元素</span></span><br><span class=\"line\">ancestor_self = html.xpath(<span class=\"string\">&#x27;//a[@title=&quot;1&quot;]/../ancestor-or-self::li&#x27;</span>) <span class=\"comment\"># 获取当前元素的所有父辈为li元素的节点（包括当前元素）</span></span><br><span class=\"line\">print(ancestor_self)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Beautifulsoup4使用\"><a href=\"#Beautifulsoup4使用\" class=\"headerlink\" title=\"Beautifulsoup4使用\"></a>Beautifulsoup4使用</h2><ul>\n<li><code>Beautiful Soup</code>自动将输入文档转换为Unicode编码, 输出文档转换为utf-8编码</li>\n<li>使用前安装 <code>pip install beautifulsoup4</code></li>\n<li>引入<code>from bs4 import Beautifulsoup4</code></li>\n</ul>\n<h3 id=\"获取内容\"><a href=\"#获取内容\" class=\"headerlink\" title=\"获取内容\"></a>获取内容</h3><ul>\n<li>标签有两个重要的属性name, attrs</li>\n<li>文本内容的获取有三种方法</li>\n<li><code>.string</code>方法返回一个迭代器</li>\n<li><code>.text</code>方法返回节点文本</li>\n<li><code>.get_text()</code>方法返回节点文本</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 获取标题对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(soup.title)  <span class=\"comment\"># &lt;title&gt;xPath方法&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># 获取标题内容</span></span><br><span class=\"line\">print(soup.title.string)  <span class=\"comment\"># 返回迭代器</span></span><br><span class=\"line\">print(soup.title.text)</span><br><span class=\"line\">print(soup.title.get_text())</span><br><span class=\"line\">print(soup.find(<span class=\"string\">&#x27;title&#x27;</span>).get_text())</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过上下级获得对象</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># print(soup.title.parent)   # 返回父节点包括父节点中的内容</span></span><br><span class=\"line\">print(soup.li.child)  <span class=\"comment\"># Node</span></span><br><span class=\"line\">print(soup.li.children)  <span class=\"comment\"># 返回一个迭代器</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取第一个li标签\"><a href=\"#获取第一个li标签\" class=\"headerlink\" title=\"获取第一个li标签\"></a>获取第一个li标签</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(soup.li.get_text())  <span class=\"comment\"># 匹配到第一个，返回所有节点的文本信息</span></span><br><span class=\"line\">print(soup.find(<span class=\"string\">&#x27;li&#x27;</span>).text)</span><br><span class=\"line\"><span class=\"comment\"># 获取ul的子标签们   (空行也看成了一个children)</span></span><br><span class=\"line\">print(soup.ul.children)</span><br><span class=\"line\"><span class=\"keyword\">for</span> index, item <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(soup.ul.children):</span><br><span class=\"line\">    print(index, item)</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取元素的属性\"><a href=\"#获取元素的属性\" class=\"headerlink\" title=\"获取元素的属性\"></a>获取元素的属性</h3><ul>\n<li>使用 <code>.属性名</code> 的方法, 但是只能获取到一个</li>\n<li>使用<code>元素.attrs[&#39;属性名&#39;]</code>的方法返回的时一个列表</li>\n<li>如果使用两次 <code>soup.元素</code> 第一次获取的是匹配到的第一个元素, 第二次是匹配到的第二个元素</li>\n</ul>\n<h3 id=\"获取多个元素\"><a href=\"#获取多个元素\" class=\"headerlink\" title=\"获取多个元素\"></a>获取多个元素</h3><ul>\n<li>find方法获取一个元素</li>\n<li>find_all获取多个元素, 可以加上<code>limit</code>来达到限制个数的问题,  <code>recursive = True</code> 寻找子孙 ; <code>recursive = False</code>只找子</li>\n<li>多层级查找 find_all返回的是一个列表 可以遍历该列表再次使用find方法或者find_all方法 进行元素的获取</li>\n</ul>\n<h3 id=\"通过指定的属性-获取对象\"><a href=\"#通过指定的属性-获取对象\" class=\"headerlink\" title=\"通过指定的属性, 获取对象\"></a>通过指定的属性, 获取对象</h3><ul>\n<li>id和class选择器, class比较特殊, 因为是关键字 在使用class时改成<code>class_</code></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(soup.find(<span class=\"built_in\">id</span>=<span class=\"string\">&#x27;a&#x27;</span>))</span><br><span class=\"line\">print(soup.find(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"built_in\">id</span>=<span class=\"string\">&#x27;a&#x27;</span>))</span><br><span class=\"line\">print(soup.find_all(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"built_in\">id</span>=<span class=\"string\">&#x27;a&#x27;</span>))  <span class=\"comment\"># 可以使用下标查询</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># class是关键字 要这么写class_</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">&#x27;class1&#x27;</span>, soup.find_all(<span class=\"string\">&#x27;a&#x27;</span>, class_=<span class=\"string\">&#x27;a&#x27;</span>))</span><br><span class=\"line\">print(<span class=\"string\">&#x27;class2&#x27;</span>, soup.find_all(<span class=\"string\">&#x27;a&#x27;</span>, attrs=&#123;<span class=\"string\">&#x27;class&#x27;</span>: <span class=\"string\">&#x27;item&#x27;</span>&#125;))  <span class=\"comment\"># 更通用</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;class3&#x27;</span>, soup.find_all(<span class=\"string\">&#x27;a&#x27;</span>, attrs=&#123;<span class=\"string\">&#x27;class&#x27;</span>: <span class=\"string\">&#x27;item&#x27;</span>, <span class=\"string\">&#x27;id&#x27;</span>: <span class=\"string\">&#x27;a&#x27;</span>&#125;))  <span class=\"comment\"># 多条件</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用函数作为参数-返回元素\"><a href=\"#使用函数作为参数-返回元素\" class=\"headerlink\" title=\"使用函数作为参数, 返回元素\"></a>使用函数作为参数, 返回元素</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">judgeTilte1</span>(<span class=\"params\">t</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> t == <span class=\"string\">&#x27;a&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(soup.find_all(class_=judgeTilte1))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>根据长度来判断</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 判断长度</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re  <span class=\"comment\"># 正则表达式</span></span><br><span class=\"line\">reg = re.<span class=\"built_in\">compile</span>(<span class=\"string\">&quot;item&quot;</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">judgeTilte2</span>(<span class=\"params\">t</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># 返回长度为5，且包含&#x27;item&#x27;的t参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(<span class=\"built_in\">str</span>(t)) == <span class=\"number\">5</span> <span class=\"keyword\">and</span> <span class=\"built_in\">bool</span>(re.search(reg, t))</span><br><span class=\"line\">print(soup.find_all(class_=judgeTilte2))</span><br></pre></td></tr></table></figure>\n<h3 id=\"可以使用css选择器\"><a href=\"#可以使用css选择器\" class=\"headerlink\" title=\"可以使用css选择器\"></a>可以使用css选择器</h3><ul>\n<li>select方法返回的都是一个列表</li>\n<li>可以通过标签名查找, 属性查找, 标签+类名+id, 组合查找</li>\n</ul>\n<p><a href=\"https://blog.csdn.net/qq_21933615/article/details/81171951\">Python中BeautifulSoup库的用法</a><br><a href=\"https://blog.csdn.net/love666666shen/article/details/77512353\">python beautiful soup库的超详细用法</a><br><a href=\"https://blog.csdn.net/IT_arookie/article/details/82824620\">python 爬虫 提取文本之BeautifulSoup详细用法</a></p>\n","categories":[{"name":"python","path":"api/categories/python.json"}],"tags":[]}