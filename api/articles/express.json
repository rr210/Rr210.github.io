{"title":"Express 框架 知识总结","slug":"express","date":"2021-03-23T08:23:41.000Z","updated":"2021-09-04T13:34:53.558Z","comments":true,"path":"api/articles/express.json","excerpt":null,"covers":null,"content":"<h2 id=\"express框架\"><a href=\"#express框架\" class=\"headerlink\" title=\"express框架\"></a>express框架</h2><ol>\n<li>使用send()方法代替end</li>\n<li>自动设置http状态码，</li>\n<li>自动检测响应内容的类型，</li>\n<li>设置相应内容类型及其编码</li>\n</ol>\n<h2 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h2><ol>\n<li>一堆方法，中间件方法，请求处理函数</li>\n<li>使用<code>app.use</code>方法,匹配所有的方式</li>\n<li>应用</li>\n</ol>\n<ul>\n<li>路由保护</li>\n<li>网站维护</li>\n<li>自定义404状态码<details green><summary> <p>查看代码</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 创建网站服务器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.get(&#x27;/&#x27;,(req,res)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     // 使用send()方法代替end，自动设置http状态码，自动检测响应内容的类型，对那个设置相应内容类型及其编码</span></span><br><span class=\"line\"><span class=\"comment\">//     res.send(&#x27;启动成功&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">// app.get(&#x27;/list&#x27;,(req,res)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     res.send(&#123;name:&#x27;张是&#x27;,age:1&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 中间件，使用next继续执行</span></span><br><span class=\"line\"><span class=\"comment\">// 使用app.use方法，匹配所有的请求方式,可以自定义404界面</span></span><br><span class=\"line\">app.use(<span class=\"string\">&#x27;/&#x27;</span>,<span class=\"function\">(<span class=\"params\">req,res,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">    next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/&#x27;</span>,<span class=\"function\">(<span class=\"params\">req,res,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    req.name = <span class=\"string\">&#x27;zs&#x27;</span></span><br><span class=\"line\">    next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/&#x27;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    res.send(req.name)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 可以自定义404界面</span></span><br><span class=\"line\">app.use(<span class=\"function\">(<span class=\"params\">req,res,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    res.status(<span class=\"number\">404</span>).send(<span class=\"string\">&#x27;当前访问的页面不存在&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;网站服务器启动成功&#x27;</span>);</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n\n</li>\n</ul>\n<h2 id=\"错误处理中间件\"><a href=\"#错误处理中间件\" class=\"headerlink\" title=\"错误处理中间件\"></a>错误处理中间件</h2><ol>\n<li>统一处理错误  <code>app.use((err,req,res,next)=&gt;&#123;&#125;)</code></li>\n<li>异步代码执行出错无法读取，手动使用next方法<details green><summary> <p>同步代码</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误处理中间件</span></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/index&#x27;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;程序发生了未知错误&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.use(<span class=\"function\">(<span class=\"params\">err,req,res,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    res.status(<span class=\"number\">500</span>).send(err.message)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<details green><summary> <p>异步代码</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误处理中间件</span></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/index&#x27;</span>,<span class=\"function\">(<span class=\"params\">req,res,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// throw new Error(&#x27;程序发生了未知错误&#x27;)</span></span><br><span class=\"line\">    fs.readFile(<span class=\"string\">&#x27;./dawdaw&#x27;</span>,<span class=\"string\">&#x27;utf8&#x27;</span>,<span class=\"function\">(<span class=\"params\">err,result</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            next(err)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            res.send(result)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.use(<span class=\"function\">(<span class=\"params\">err,req,res,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    res.status(<span class=\"number\">500</span>).send(err.message)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n\n</li>\n</ol>\n<h2 id=\"捕获错误\"><a href=\"#捕获错误\" class=\"headerlink\" title=\"捕获错误\"></a>捕获错误</h2><ol>\n<li><code>try catch</code> 语句</li>\n<li>捕获异步函数错误<details green><summary> <p>查看答案</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promisify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;util&#x27;</span>).promisify</span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/index&#x27;</span>,<span class=\"keyword\">async</span> (req,res,next)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> readFile(<span class=\"string\">&#x27;./add.js&#x27;</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(ex)&#123;</span><br><span class=\"line\">        next(ex)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.use(<span class=\"function\">(<span class=\"params\">err,req,res,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    res.status(<span class=\"number\">500</span>).send(err.message)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n\n</li>\n</ol>\n<h2 id=\"构造模块化路由\"><a href=\"#构造模块化路由\" class=\"headerlink\" title=\"构造模块化路由\"></a>构造模块化路由</h2><ol>\n<li><code>express.Router()</code> 创建路由对象</li>\n<li>将路由请求路径进行匹配</li>\n</ol>\n<details green><summary> <p>查看答案</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 路由访问二级</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 创建网站服务器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"><span class=\"keyword\">const</span> admin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./router/admin&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> home = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./router/home&#x27;</span>)</span><br><span class=\"line\">app.use(<span class=\"string\">&#x27;/home&#x27;</span>,home)</span><br><span class=\"line\">app.use(<span class=\"string\">&#x27;/admin&#x27;</span>,admin)</span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>)</span><br><span class=\"line\"><span class=\"comment\">// module.exports = home</span></span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n\n<h2 id=\"get-post参数的获取\"><a href=\"#get-post参数的获取\" class=\"headerlink\" title=\"get/post参数的获取\"></a>get/post参数的获取</h2><ol>\n<li><code>req.query</code> 获取get 的请求参数</li>\n<li>post的请求参数  使用第三方模块 <code>body-parser</code>  <code>req.body</code>获取post的请求参数</li>\n</ol>\n<h2 id=\"express路由参数\"><a href=\"#express路由参数\" class=\"headerlink\" title=\"express路由参数\"></a>express路由参数</h2><ol>\n<li><code>:</code>后面写要传递的对象参数 <code>params</code><details green><summary> <p>查看答案</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">&#x27;/index/:id/:name/:age&#x27;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    res.send(req.params);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n\n</li>\n</ol>\n<h2 id=\"静态资源访问\"><a href=\"#静态资源访问\" class=\"headerlink\" title=\"静态资源访问\"></a>静态资源访问</h2><ol>\n<li><code>express.static(&#39;public&#39;)</code>对静态资源进行处理,pubic 表示静态资源所在的路径</li>\n<li>格式<code> app.use(express,static(path.join(__dirname,&#39;public&#39;))</code></li>\n</ol>\n<h2 id=\"模板引擎\"><a href=\"#模板引擎\" class=\"headerlink\" title=\"模板引擎\"></a>模板引擎</h2><ol>\n<li><code>all-template express-art-template</code></li>\n<li>渲染某个后缀文件时 使用<code>express-art-tenplate</code></li>\n</ol>\n<details green><summary> <p>查看答案</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"><span class=\"comment\">// 设置模板的渲染后缀</span></span><br><span class=\"line\">app.engine(<span class=\"string\">&#x27;art&#x27;</span>,<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express-art-template&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\">// 设置模板的默认路径</span></span><br><span class=\"line\">app.set(<span class=\"string\">&#x27;views&#x27;</span>,path.join(__dirname,<span class=\"string\">&#x27;views&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\">// 渲染模板时不写后缀，默认的后缀进行拼接</span></span><br><span class=\"line\">app.set(<span class=\"string\">&#x27;view engine&#x27;</span>,<span class=\"string\">&#x27;art&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 响应可滑动</span></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/index&#x27;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 渲染模板</span></span><br><span class=\"line\">    res.render(<span class=\"string\">&#x27;index&#x27;</span>,&#123;</span><br><span class=\"line\">        msg:<span class=\"string\">&#x27;message&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n\n<h2 id=\"app-locals对象\"><a href=\"#app-locals对象\" class=\"headerlink\" title=\"app.locals对象\"></a>app.locals对象</h2><ol>\n<li>使用app.locals方法可以在所有的模板下可以获取到<details green><summary> <p>查看答案</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.locals.users = [&#123;</span><br><span class=\"line\">    name:<span class=\"string\">&#x27;hello&#x27;</span>,</span><br><span class=\"line\">    age:<span class=\"number\">13</span>,</span><br><span class=\"line\">    sex:<span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    name:<span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">    age:<span class=\"number\">20</span>,</span><br><span class=\"line\">    sex:<span class=\"number\">0</span></span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n\n</li>\n</ol>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ol>\n<li>静态资源是由浏览器进行解析，</li>\n<li>子模版的相对路径就是当前文件，因为它是由模板引擎解析的</li>\n</ol>\n<h2 id=\"密码加密-bcypt\"><a href=\"#密码加密-bcypt\" class=\"headerlink\" title=\"密码加密 bcypt\"></a>密码加密 bcypt</h2><ol>\n<li>哈希密码  单程解密</li>\n<li><code>bcrypt</code>方法  生成随机字符串，hash方法进行加密</li>\n<li>或者使用<code>crypto</code>实现md5简单加密，可以进行二次加密或者添加字符串进行加密处理</li>\n</ol>\n<details green><summary> <p>查看答案</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> md5Crypto=<span class=\"function\">(<span class=\"params\">str</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hash=crypto.createHash(<span class=\"string\">&#x27;md5&#x27;</span>);</span><br><span class=\"line\">    hash.update(str);</span><br><span class=\"line\">    <span class=\"comment\">//加密后是二进制的，不好看，转换成16进制，并且字母大写</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hash.digest(<span class=\"string\">&quot;hex&quot;</span>).toUpperCase();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 设定一个字符加入md5加密中</span></span><br><span class=\"line\">mdsecret = <span class=\"string\">&#x27;MaX_daw&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 建用户集合作为模块成员进行导出，开放对象</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    User,md5Crypto,mdsecret</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n\n<ol start=\"4\">\n<li>在进行密码比对时可以使用(bcypt.compare(暗文密码，明文密码)</li>\n</ol>\n<h2 id=\"cookie和session\"><a href=\"#cookie和session\" class=\"headerlink\" title=\"cookie和session\"></a>cookie和session</h2><ol>\n<li>cookie中的数据是以域名的形式进行区分的</li>\n<li>cookie中的数据是有过期事件的，会随请求被发送到服务器端</li>\n<li>session  对象  </li>\n<li>使用<code>redirect</code>方法重定向到用户列表页面</li>\n<li>登录拦截 使用中间件重定向 判断session中是否存在某个属性</li>\n<li>使用clearCookie删除页面已经保存的cookie  然后对页面进行重定向</li>\n</ol>\n<h2 id=\"Joi第三方模块\"><a href=\"#Joi第三方模块\" class=\"headerlink\" title=\"Joi第三方模块\"></a>Joi第三方模块</h2><ol>\n<li>JavaScript对象的规则描述语言和验证器</li>\n<li>注意joi的版本问题 【<a href=\"https://blog.csdn.net/QFREX/article/details/108818047\">no function解决方法</a>】</li>\n<li>validate方法 为异步函数 ，对用户提交的信息进行判断并返回错误</li>\n</ol>\n<details green><summary> <p>查看答案</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Joi = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;joi&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Schema = &#123;</span><br><span class=\"line\">    username: Joi.string().min(<span class=\"number\">2</span>).max(<span class=\"number\">10</span>).error(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;username属性没有通过验证&#x27;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">valwidate</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> Joi.validate(&#123;<span class=\"attr\">username</span>:<span class=\"string\">&#x27;a&#x27;</span>&#125;,Schema)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(e.message);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;验证通过&#x27;</span>);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">valwidate()</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n\n<h2 id=\"对页面进行分页\"><a href=\"#对页面进行分页\" class=\"headerlink\" title=\"对页面进行分页\"></a>对页面进行分页</h2><ol>\n<li>使用<code>countDocuments(&#123;&#125;)</code> 来获取数据库集合的总数</li>\n<li>并且定义一个总的页码</li>\n<li>使用limit限制，使用skip跳过n个数据</li>\n<li><code>-</code>有隐式运算<details green><summary> <p>查看答案</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">&lt;% for(var i=1;i&lt;=pages;i++)&#123;%&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;li&gt;&lt;a href=&quot;/admin/user?page=&lt;%=i%&gt;&quot;&gt;&lt;%=i%&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;%&#125;%&gt;</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\">下一页 </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display:&lt;%= page-0+1 &gt; pages ? &#x27;none&#x27; : &#x27;inline&#x27; %&gt;&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/admin/user?page=&lt;%= page-0+1 %&gt;&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"symbol\">&amp;raquo;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n\n</li>\n</ol>\n<h2 id=\"标识编码\"><a href=\"#标识编码\" class=\"headerlink\" title=\"标识编码\"></a>标识编码</h2><ol>\n<li>使用<code>res.app.locals.currentLink</code> 来标识当前选中的页面</li>\n<li>可以使用js来改变当前的选中情况</li>\n<li>表单enctype属性表示编码</li>\n<li>指定表单数据的编码类型 原型 <code>application/x-www-form-urlencoded</code></li>\n<li>加个表单对的数据编码成二进制的类型 <code>multipart/form-data</code></li>\n</ol>\n<h2 id=\"formidable解析表单\"><a href=\"#formidable解析表单\" class=\"headerlink\" title=\"formidable解析表单\"></a>formidable解析表单</h2><ol>\n<li>解析表单，支持<code>get</code>请求参数，<code>post</code>请求参数，文件上传</li>\n<li>使用<code>form.keepExtensions</code> 保留表单上传文件的扩展名</li>\n<li><code>form.uploadDir</code> 表示设置文件的上传路径</li>\n<li>可以对表单提交的二进制信息类型进行解析</li>\n<li>fields 保存普通的表单信息 files 表示文件的信息<details green><summary> <p>查看答案</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span>  formidable  = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;formidable&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导入第三方模块 formidable</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\">(<span class=\"params\">req,res</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建表单解析对象</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm()</span><br><span class=\"line\">    <span class=\"comment\">// 配置上传文件的后缀</span></span><br><span class=\"line\">    form.uploadDir = path.join(__dirname,<span class=\"string\">&#x27;../&#x27;</span>,<span class=\"string\">&#x27;../&#x27;</span>,<span class=\"string\">&#x27;public&#x27;</span>,<span class=\"string\">&#x27;uploads&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 保留上传文件的后缀</span></span><br><span class=\"line\">    form.keepExtensions = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\">// 解析表单</span></span><br><span class=\"line\">    form.parse(req,<span class=\"function\">(<span class=\"params\">err,fields,files</span>) =&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. err表示错误对象，如果表单解析失败 err里面存储错误信息 如果表单解析成功</span></span><br><span class=\"line\">        <span class=\"comment\">// fields表示普通的表单数据</span></span><br><span class=\"line\">        <span class=\"comment\">// files表示保存了和上传文件相关的数据</span></span><br><span class=\"line\">        res.send(files)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// res.send(&#x27;ok&#x27;)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n\n</li>\n</ol>\n<h2 id=\"文件读取\"><a href=\"#文件读取\" class=\"headerlink\" title=\"文件读取\"></a>文件读取</h2><ol>\n<li><code>FileReader()</code>  <code>readAsDataURL(&#39;文件&#39;)</code></li>\n<li>并且<code>readAsDataURL</code> 为异步函数无法直接获取信息，需要调用 onload来返回读取的结果<details green><summary> <p>查看答案</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> file = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#file&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> preview = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#preview&#x27;</span>)</span><br><span class=\"line\">file.onchange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">    <span class=\"comment\">// 用户选择的文件列表</span></span><br><span class=\"line\">    reader.readAsDataURL(<span class=\"built_in\">this</span>.files[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"comment\">// 监听onload事件 </span></span><br><span class=\"line\">    reader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 将获取到的文件结果显示在页面中</span></span><br><span class=\"line\">       preview.src = reader.result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n\n</li>\n</ol>\n<h2 id=\"数据分页\"><a href=\"#数据分页\" class=\"headerlink\" title=\"数据分页\"></a>数据分页</h2><ol>\n<li>使用第三方模块 <code>mongoose-sex-page</code></li>\n<li>page 表示当前页 size 表示每页显示数据的条数，display表示客户端显示的页码 total数据总数 pages 总页数</li>\n<li><code>$index</code> 表示当前某个标签的索引号</li>\n<li>在进行内容渲染时 使用正则将内容中html标签去除  replace方法<code>/&lt;\\/?.+?&gt;/g</code>,并且使用字符串的截取将文本溢出省略 <code>substr(0,150)</code>如果文中出现乱码可以将返回的数据以原文输出方式显示</li>\n</ol>\n<details green><summary> <p>查看答案</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;Article&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../../model/article&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> pagination = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mongoose-sex-page&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// const dateFormat = require(&#x27;dateformat&#x27;)</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"keyword\">async</span> (req,res)=&gt;&#123;</span><br><span class=\"line\">    res.app.locals.currentLink = <span class=\"string\">&#x27;acticle&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取地址栏中的page页</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; page &#125;= req.query</span><br><span class=\"line\">    <span class=\"comment\">// 查询数据库中的所有数据,链式查找根据关联的id值查询 使用populate方法查询 括号内添加关联的属性</span></span><br><span class=\"line\">    <span class=\"comment\">// 利用 lean（） 方法将多级联合的结果转化为普通对象 ，缓解两者的冲突。</span></span><br><span class=\"line\">    <span class=\"comment\">// let article = await Article.find().populate(&#x27;author&#x27;).lean()</span></span><br><span class=\"line\">    <span class=\"comment\">// console.log(article);</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取数据集合中的所有数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> total = <span class=\"keyword\">await</span> Article.countDocuments(&#123;&#125;)</span><br><span class=\"line\">    <span class=\"comment\">// res.send(article)</span></span><br><span class=\"line\">    <span class=\"comment\">// 定义每页显示的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> pagesize = <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> pagecount = <span class=\"built_in\">Math</span>.ceil(total/pagesize)</span><br><span class=\"line\">    <span class=\"comment\">// page表示获取的是第几页数据</span></span><br><span class=\"line\">    <span class=\"comment\">// size表示每一页数据的数量</span></span><br><span class=\"line\">    <span class=\"comment\">// display表示页码</span></span><br><span class=\"line\">    <span class=\"comment\">// exec()方法避免多级查询与渲染之间发生冲突</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> articles = <span class=\"keyword\">await</span> pagination(Article).find().page(page).size(pagesize).display(pagecount).populate(<span class=\"string\">&#x27;author&#x27;</span>).exec()</span><br><span class=\"line\">    <span class=\"comment\">// 像转换为字符串类型，在转换为对象的类型</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> str = <span class=\"built_in\">JSON</span>.stringify(articles);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> articlejson = <span class=\"built_in\">JSON</span>.parse(str);</span><br><span class=\"line\">    <span class=\"comment\">// res.send(articlejson)</span></span><br><span class=\"line\">    res.render(<span class=\"string\">&#x27;admin/article&#x27;</span>,&#123;</span><br><span class=\"line\">        articles: articlejson,</span><br><span class=\"line\">        total:total,</span><br><span class=\"line\">        page:page</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n\n<ol start=\"3\">\n<li>可以使用自定义的参数来进行上下页面的切换，</li>\n</ol>\n<ul>\n<li>比如通过对地址栏数据的获取，判断当前页面所对应的页码，然后将此页码进行判断比如进行上一页的切换，如果页面-1小于1则使得当前的地址栏中的页码数等于一，反之使得在当前页码的基础上加一，下一页雷同 注意隐式算法</li>\n<li>第二种方法使用css将其隐藏，达到某个页码时将此模块显示</li>\n<li>使用第三方模块 pagination-sex-page下的参数执行第一步操作  ，在进行上下页切换时可以使用模块化语言 使用if判断 如果满足条件才让它显示出来</li>\n</ul>\n<h2 id=\"mongoDB数据库添加账号\"><a href=\"#mongoDB数据库添加账号\" class=\"headerlink\" title=\"mongoDB数据库添加账号\"></a>mongoDB数据库添加账号</h2><ol>\n<li>查看数据库  连接数据库<code> mongo</code>  查询数据库 <code>show dbs</code></li>\n<li>切换到admin数据库 <code>use admin </code> </li>\n<li>创建超级管理员账号<code> db.createUser(&#123;user:&#39;root&#39;,pwd:&#39;root&#39;,roles:[&#39;root&#39;]&#125;)</code></li>\n<li>切换到blog数据<code>user blog</code></li>\n<li>创建普通账号 <code>db.createUser(&#123;user:&#39;xxxx&#39;,pwd:&#39;xxxx&#39;,roles:[&#39;readWrite&#39;]&#125;)</code></li>\n<li>移除数据库 先停止<code> net stop mongodb</code>在使用<code>mongod --remove</code></li>\n<li>创建数据库环境 <code>mongod --logpath=&quot;D:\\mongoDB\\install\\server\\log\\newmongod.log&quot; --dbpath=&quot;D:\\mongoDB\\install\\server\\data&quot; --install --auth</code></li>\n<li>连接数据库 使用 <code>mongodb://普通用户名:用户名密码@localhost:端口号/要连接数据库名称</code></li>\n<li>启动数据库 <code>net start mongodb</code></li>\n</ol>\n<h2 id=\"开发环境和生产环境\"><a href=\"#开发环境和生产环境\" class=\"headerlink\" title=\"开发环境和生产环境\"></a>开发环境和生产环境</h2><ol>\n<li>使用process.env.某个指定的对象来判断当前的环境情况</li>\n<li>morgan(‘dev’)  在开发环境中将客户端发送到服务器端的请求信息打印到控制台中，只能在开发环境中使用</li>\n<li>production 生产环境</li>\n</ol>\n<h2 id=\"config模块\"><a href=\"#config模块\" class=\"headerlink\" title=\"config模块\"></a>config模块</h2><ol>\n<li>将不同运行环境下的应用配置信息抽离到单独的文件中，模块内部字段判断当前的运行环境，并读取对应的配置信息</li>\n<li>创建config文件夹  default  development production 三个json文件，通过require的方法导入    </li>\n<li>get方法，</li>\n<li>这个方法可以自动判断当前的运行环境，并根据相对应的配置信息返回，如果该环境配置下没有匹配到某个指定信息，则在其他的配置信息中自动查询</li>\n<li>将敏感配置信息存储在环境变量中<code>custom-environment-variables.json</code>  自定义环境变量</li>\n</ol>\n<h2 id=\"评论的创建\"><a href=\"#评论的创建\" class=\"headerlink\" title=\"评论的创建\"></a>评论的创建</h2><ol>\n<li>创建评论的集合规则 将评论属性的id值与文章的内容id进行关联， 设置其属性为 mongoose.Schema.Types.Objected, ref 为所关联集合名称</li>\n<li>建立评论的路由 只有当用户登录之后才可以使用评论的模块 创建评论的模块</li>\n<li>获取用户在文本框内输入的内容，将此内容通过所在的文章的id值新建一个数据库或者上传到文章的数据库页面</li>\n<li>用户需要登录后才能使用评论 在用户登录后判断如果登录的用户是超级管理员则将页面重定向到博客惯例页面如果是普通用户则将页面重定向到文章的首页</li>\n<li>将登录用户的role存储到session中，在对session进行拦截判断 并且将登录后的首页信息改为用户的信息对评论的状态进行配置，当用户登录后 在本地已经存储到一个userInfo，判断userInfo是否存在，如果存在则将评论模块呈现出来，如果未登录则将评论状态和首页头部的用户状态关闭</li>\n<li>渲染评论页面直接在文章页面渲染</li>\n<li>将用户信息渲染到页面页 创建评论路由 根据评论集合创建规则，上传集合对象  post请求后将页面重定向未当前页面</li>\n</ol>\n","more":"<h2 id=\"express框架\"><a href=\"#express框架\" class=\"headerlink\" title=\"express框架\"></a>express框架</h2><ol>\n<li>使用send()方法代替end</li>\n<li>自动设置http状态码，</li>\n<li>自动检测响应内容的类型，</li>\n<li>设置相应内容类型及其编码</li>\n</ol>\n<h2 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h2><ol>\n<li>一堆方法，中间件方法，请求处理函数</li>\n<li>使用<code>app.use</code>方法,匹配所有的方式</li>\n<li>应用</li>\n</ol>\n<ul>\n<li>路由保护</li>\n<li>网站维护</li>\n<li>自定义404状态码<details green><summary> <p>查看代码</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 创建网站服务器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.get(&#x27;/&#x27;,(req,res)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     // 使用send()方法代替end，自动设置http状态码，自动检测响应内容的类型，对那个设置相应内容类型及其编码</span></span><br><span class=\"line\"><span class=\"comment\">//     res.send(&#x27;启动成功&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">// app.get(&#x27;/list&#x27;,(req,res)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     res.send(&#123;name:&#x27;张是&#x27;,age:1&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 中间件，使用next继续执行</span></span><br><span class=\"line\"><span class=\"comment\">// 使用app.use方法，匹配所有的请求方式,可以自定义404界面</span></span><br><span class=\"line\">app.use(<span class=\"string\">&#x27;/&#x27;</span>,<span class=\"function\">(<span class=\"params\">req,res,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">    next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/&#x27;</span>,<span class=\"function\">(<span class=\"params\">req,res,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    req.name = <span class=\"string\">&#x27;zs&#x27;</span></span><br><span class=\"line\">    next()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/&#x27;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    res.send(req.name)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 可以自定义404界面</span></span><br><span class=\"line\">app.use(<span class=\"function\">(<span class=\"params\">req,res,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    res.status(<span class=\"number\">404</span>).send(<span class=\"string\">&#x27;当前访问的页面不存在&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;网站服务器启动成功&#x27;</span>);</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n\n</li>\n</ul>\n<h2 id=\"错误处理中间件\"><a href=\"#错误处理中间件\" class=\"headerlink\" title=\"错误处理中间件\"></a>错误处理中间件</h2><ol>\n<li>统一处理错误  <code>app.use((err,req,res,next)=&gt;&#123;&#125;)</code></li>\n<li>异步代码执行出错无法读取，手动使用next方法<details green><summary> <p>同步代码</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误处理中间件</span></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/index&#x27;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;程序发生了未知错误&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.use(<span class=\"function\">(<span class=\"params\">err,req,res,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    res.status(<span class=\"number\">500</span>).send(err.message)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<details green><summary> <p>异步代码</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误处理中间件</span></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/index&#x27;</span>,<span class=\"function\">(<span class=\"params\">req,res,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// throw new Error(&#x27;程序发生了未知错误&#x27;)</span></span><br><span class=\"line\">    fs.readFile(<span class=\"string\">&#x27;./dawdaw&#x27;</span>,<span class=\"string\">&#x27;utf8&#x27;</span>,<span class=\"function\">(<span class=\"params\">err,result</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            next(err)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            res.send(result)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.use(<span class=\"function\">(<span class=\"params\">err,req,res,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    res.status(<span class=\"number\">500</span>).send(err.message)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n\n</li>\n</ol>\n<h2 id=\"捕获错误\"><a href=\"#捕获错误\" class=\"headerlink\" title=\"捕获错误\"></a>捕获错误</h2><ol>\n<li><code>try catch</code> 语句</li>\n<li>捕获异步函数错误<details green><summary> <p>查看答案</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promisify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;util&#x27;</span>).promisify</span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/index&#x27;</span>,<span class=\"keyword\">async</span> (req,res,next)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> readFile(<span class=\"string\">&#x27;./add.js&#x27;</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(ex)&#123;</span><br><span class=\"line\">        next(ex)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.use(<span class=\"function\">(<span class=\"params\">err,req,res,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    res.status(<span class=\"number\">500</span>).send(err.message)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n\n</li>\n</ol>\n<h2 id=\"构造模块化路由\"><a href=\"#构造模块化路由\" class=\"headerlink\" title=\"构造模块化路由\"></a>构造模块化路由</h2><ol>\n<li><code>express.Router()</code> 创建路由对象</li>\n<li>将路由请求路径进行匹配</li>\n</ol>\n<details green><summary> <p>查看答案</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 路由访问二级</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 创建网站服务器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"><span class=\"keyword\">const</span> admin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./router/admin&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> home = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./router/home&#x27;</span>)</span><br><span class=\"line\">app.use(<span class=\"string\">&#x27;/home&#x27;</span>,home)</span><br><span class=\"line\">app.use(<span class=\"string\">&#x27;/admin&#x27;</span>,admin)</span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>)</span><br><span class=\"line\"><span class=\"comment\">// module.exports = home</span></span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n\n<h2 id=\"get-post参数的获取\"><a href=\"#get-post参数的获取\" class=\"headerlink\" title=\"get/post参数的获取\"></a>get/post参数的获取</h2><ol>\n<li><code>req.query</code> 获取get 的请求参数</li>\n<li>post的请求参数  使用第三方模块 <code>body-parser</code>  <code>req.body</code>获取post的请求参数</li>\n</ol>\n<h2 id=\"express路由参数\"><a href=\"#express路由参数\" class=\"headerlink\" title=\"express路由参数\"></a>express路由参数</h2><ol>\n<li><code>:</code>后面写要传递的对象参数 <code>params</code><details green><summary> <p>查看答案</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">&#x27;/index/:id/:name/:age&#x27;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    res.send(req.params);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n\n</li>\n</ol>\n<h2 id=\"静态资源访问\"><a href=\"#静态资源访问\" class=\"headerlink\" title=\"静态资源访问\"></a>静态资源访问</h2><ol>\n<li><code>express.static(&#39;public&#39;)</code>对静态资源进行处理,pubic 表示静态资源所在的路径</li>\n<li>格式<code> app.use(express,static(path.join(__dirname,&#39;public&#39;))</code></li>\n</ol>\n<h2 id=\"模板引擎\"><a href=\"#模板引擎\" class=\"headerlink\" title=\"模板引擎\"></a>模板引擎</h2><ol>\n<li><code>all-template express-art-template</code></li>\n<li>渲染某个后缀文件时 使用<code>express-art-tenplate</code></li>\n</ol>\n<details green><summary> <p>查看答案</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"><span class=\"comment\">// 设置模板的渲染后缀</span></span><br><span class=\"line\">app.engine(<span class=\"string\">&#x27;art&#x27;</span>,<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express-art-template&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\">// 设置模板的默认路径</span></span><br><span class=\"line\">app.set(<span class=\"string\">&#x27;views&#x27;</span>,path.join(__dirname,<span class=\"string\">&#x27;views&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\">// 渲染模板时不写后缀，默认的后缀进行拼接</span></span><br><span class=\"line\">app.set(<span class=\"string\">&#x27;view engine&#x27;</span>,<span class=\"string\">&#x27;art&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 响应可滑动</span></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/index&#x27;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 渲染模板</span></span><br><span class=\"line\">    res.render(<span class=\"string\">&#x27;index&#x27;</span>,&#123;</span><br><span class=\"line\">        msg:<span class=\"string\">&#x27;message&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n\n<h2 id=\"app-locals对象\"><a href=\"#app-locals对象\" class=\"headerlink\" title=\"app.locals对象\"></a>app.locals对象</h2><ol>\n<li>使用app.locals方法可以在所有的模板下可以获取到<details green><summary> <p>查看答案</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.locals.users = [&#123;</span><br><span class=\"line\">    name:<span class=\"string\">&#x27;hello&#x27;</span>,</span><br><span class=\"line\">    age:<span class=\"number\">13</span>,</span><br><span class=\"line\">    sex:<span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    name:<span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">    age:<span class=\"number\">20</span>,</span><br><span class=\"line\">    sex:<span class=\"number\">0</span></span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n\n</li>\n</ol>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ol>\n<li>静态资源是由浏览器进行解析，</li>\n<li>子模版的相对路径就是当前文件，因为它是由模板引擎解析的</li>\n</ol>\n<h2 id=\"密码加密-bcypt\"><a href=\"#密码加密-bcypt\" class=\"headerlink\" title=\"密码加密 bcypt\"></a>密码加密 bcypt</h2><ol>\n<li>哈希密码  单程解密</li>\n<li><code>bcrypt</code>方法  生成随机字符串，hash方法进行加密</li>\n<li>或者使用<code>crypto</code>实现md5简单加密，可以进行二次加密或者添加字符串进行加密处理</li>\n</ol>\n<details green><summary> <p>查看答案</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> md5Crypto=<span class=\"function\">(<span class=\"params\">str</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hash=crypto.createHash(<span class=\"string\">&#x27;md5&#x27;</span>);</span><br><span class=\"line\">    hash.update(str);</span><br><span class=\"line\">    <span class=\"comment\">//加密后是二进制的，不好看，转换成16进制，并且字母大写</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hash.digest(<span class=\"string\">&quot;hex&quot;</span>).toUpperCase();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 设定一个字符加入md5加密中</span></span><br><span class=\"line\">mdsecret = <span class=\"string\">&#x27;MaX_daw&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 建用户集合作为模块成员进行导出，开放对象</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    User,md5Crypto,mdsecret</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n\n<ol start=\"4\">\n<li>在进行密码比对时可以使用(bcypt.compare(暗文密码，明文密码)</li>\n</ol>\n<h2 id=\"cookie和session\"><a href=\"#cookie和session\" class=\"headerlink\" title=\"cookie和session\"></a>cookie和session</h2><ol>\n<li>cookie中的数据是以域名的形式进行区分的</li>\n<li>cookie中的数据是有过期事件的，会随请求被发送到服务器端</li>\n<li>session  对象  </li>\n<li>使用<code>redirect</code>方法重定向到用户列表页面</li>\n<li>登录拦截 使用中间件重定向 判断session中是否存在某个属性</li>\n<li>使用clearCookie删除页面已经保存的cookie  然后对页面进行重定向</li>\n</ol>\n<h2 id=\"Joi第三方模块\"><a href=\"#Joi第三方模块\" class=\"headerlink\" title=\"Joi第三方模块\"></a>Joi第三方模块</h2><ol>\n<li>JavaScript对象的规则描述语言和验证器</li>\n<li>注意joi的版本问题 【<a href=\"https://blog.csdn.net/QFREX/article/details/108818047\">no function解决方法</a>】</li>\n<li>validate方法 为异步函数 ，对用户提交的信息进行判断并返回错误</li>\n</ol>\n<details green><summary> <p>查看答案</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Joi = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;joi&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Schema = &#123;</span><br><span class=\"line\">    username: Joi.string().min(<span class=\"number\">2</span>).max(<span class=\"number\">10</span>).error(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;username属性没有通过验证&#x27;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">valwidate</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> Joi.validate(&#123;<span class=\"attr\">username</span>:<span class=\"string\">&#x27;a&#x27;</span>&#125;,Schema)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(e.message);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;验证通过&#x27;</span>);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">valwidate()</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n\n<h2 id=\"对页面进行分页\"><a href=\"#对页面进行分页\" class=\"headerlink\" title=\"对页面进行分页\"></a>对页面进行分页</h2><ol>\n<li>使用<code>countDocuments(&#123;&#125;)</code> 来获取数据库集合的总数</li>\n<li>并且定义一个总的页码</li>\n<li>使用limit限制，使用skip跳过n个数据</li>\n<li><code>-</code>有隐式运算<details green><summary> <p>查看答案</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">&lt;% for(var i=1;i&lt;=pages;i++)&#123;%&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;li&gt;&lt;a href=&quot;/admin/user?page=&lt;%=i%&gt;&quot;&gt;&lt;%=i%&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;%&#125;%&gt;</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\">下一页 </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display:&lt;%= page-0+1 &gt; pages ? &#x27;none&#x27; : &#x27;inline&#x27; %&gt;&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/admin/user?page=&lt;%= page-0+1 %&gt;&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"symbol\">&amp;raquo;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n\n</li>\n</ol>\n<h2 id=\"标识编码\"><a href=\"#标识编码\" class=\"headerlink\" title=\"标识编码\"></a>标识编码</h2><ol>\n<li>使用<code>res.app.locals.currentLink</code> 来标识当前选中的页面</li>\n<li>可以使用js来改变当前的选中情况</li>\n<li>表单enctype属性表示编码</li>\n<li>指定表单数据的编码类型 原型 <code>application/x-www-form-urlencoded</code></li>\n<li>加个表单对的数据编码成二进制的类型 <code>multipart/form-data</code></li>\n</ol>\n<h2 id=\"formidable解析表单\"><a href=\"#formidable解析表单\" class=\"headerlink\" title=\"formidable解析表单\"></a>formidable解析表单</h2><ol>\n<li>解析表单，支持<code>get</code>请求参数，<code>post</code>请求参数，文件上传</li>\n<li>使用<code>form.keepExtensions</code> 保留表单上传文件的扩展名</li>\n<li><code>form.uploadDir</code> 表示设置文件的上传路径</li>\n<li>可以对表单提交的二进制信息类型进行解析</li>\n<li>fields 保存普通的表单信息 files 表示文件的信息<details green><summary> <p>查看答案</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span>  formidable  = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;formidable&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导入第三方模块 formidable</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\">(<span class=\"params\">req,res</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建表单解析对象</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm()</span><br><span class=\"line\">    <span class=\"comment\">// 配置上传文件的后缀</span></span><br><span class=\"line\">    form.uploadDir = path.join(__dirname,<span class=\"string\">&#x27;../&#x27;</span>,<span class=\"string\">&#x27;../&#x27;</span>,<span class=\"string\">&#x27;public&#x27;</span>,<span class=\"string\">&#x27;uploads&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 保留上传文件的后缀</span></span><br><span class=\"line\">    form.keepExtensions = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\">// 解析表单</span></span><br><span class=\"line\">    form.parse(req,<span class=\"function\">(<span class=\"params\">err,fields,files</span>) =&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. err表示错误对象，如果表单解析失败 err里面存储错误信息 如果表单解析成功</span></span><br><span class=\"line\">        <span class=\"comment\">// fields表示普通的表单数据</span></span><br><span class=\"line\">        <span class=\"comment\">// files表示保存了和上传文件相关的数据</span></span><br><span class=\"line\">        res.send(files)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// res.send(&#x27;ok&#x27;)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n\n</li>\n</ol>\n<h2 id=\"文件读取\"><a href=\"#文件读取\" class=\"headerlink\" title=\"文件读取\"></a>文件读取</h2><ol>\n<li><code>FileReader()</code>  <code>readAsDataURL(&#39;文件&#39;)</code></li>\n<li>并且<code>readAsDataURL</code> 为异步函数无法直接获取信息，需要调用 onload来返回读取的结果<details green><summary> <p>查看答案</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> file = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#file&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> preview = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;#preview&#x27;</span>)</span><br><span class=\"line\">file.onchange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">    <span class=\"comment\">// 用户选择的文件列表</span></span><br><span class=\"line\">    reader.readAsDataURL(<span class=\"built_in\">this</span>.files[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"comment\">// 监听onload事件 </span></span><br><span class=\"line\">    reader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 将获取到的文件结果显示在页面中</span></span><br><span class=\"line\">       preview.src = reader.result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n\n</li>\n</ol>\n<h2 id=\"数据分页\"><a href=\"#数据分页\" class=\"headerlink\" title=\"数据分页\"></a>数据分页</h2><ol>\n<li>使用第三方模块 <code>mongoose-sex-page</code></li>\n<li>page 表示当前页 size 表示每页显示数据的条数，display表示客户端显示的页码 total数据总数 pages 总页数</li>\n<li><code>$index</code> 表示当前某个标签的索引号</li>\n<li>在进行内容渲染时 使用正则将内容中html标签去除  replace方法<code>/&lt;\\/?.+?&gt;/g</code>,并且使用字符串的截取将文本溢出省略 <code>substr(0,150)</code>如果文中出现乱码可以将返回的数据以原文输出方式显示</li>\n</ol>\n<details green><summary> <p>查看答案</p> </summary>\n              <div class='content'>\n              <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;Article&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../../model/article&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> pagination = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mongoose-sex-page&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// const dateFormat = require(&#x27;dateformat&#x27;)</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"keyword\">async</span> (req,res)=&gt;&#123;</span><br><span class=\"line\">    res.app.locals.currentLink = <span class=\"string\">&#x27;acticle&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取地址栏中的page页</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; page &#125;= req.query</span><br><span class=\"line\">    <span class=\"comment\">// 查询数据库中的所有数据,链式查找根据关联的id值查询 使用populate方法查询 括号内添加关联的属性</span></span><br><span class=\"line\">    <span class=\"comment\">// 利用 lean（） 方法将多级联合的结果转化为普通对象 ，缓解两者的冲突。</span></span><br><span class=\"line\">    <span class=\"comment\">// let article = await Article.find().populate(&#x27;author&#x27;).lean()</span></span><br><span class=\"line\">    <span class=\"comment\">// console.log(article);</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取数据集合中的所有数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> total = <span class=\"keyword\">await</span> Article.countDocuments(&#123;&#125;)</span><br><span class=\"line\">    <span class=\"comment\">// res.send(article)</span></span><br><span class=\"line\">    <span class=\"comment\">// 定义每页显示的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> pagesize = <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> pagecount = <span class=\"built_in\">Math</span>.ceil(total/pagesize)</span><br><span class=\"line\">    <span class=\"comment\">// page表示获取的是第几页数据</span></span><br><span class=\"line\">    <span class=\"comment\">// size表示每一页数据的数量</span></span><br><span class=\"line\">    <span class=\"comment\">// display表示页码</span></span><br><span class=\"line\">    <span class=\"comment\">// exec()方法避免多级查询与渲染之间发生冲突</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> articles = <span class=\"keyword\">await</span> pagination(Article).find().page(page).size(pagesize).display(pagecount).populate(<span class=\"string\">&#x27;author&#x27;</span>).exec()</span><br><span class=\"line\">    <span class=\"comment\">// 像转换为字符串类型，在转换为对象的类型</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> str = <span class=\"built_in\">JSON</span>.stringify(articles);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> articlejson = <span class=\"built_in\">JSON</span>.parse(str);</span><br><span class=\"line\">    <span class=\"comment\">// res.send(articlejson)</span></span><br><span class=\"line\">    res.render(<span class=\"string\">&#x27;admin/article&#x27;</span>,&#123;</span><br><span class=\"line\">        articles: articlejson,</span><br><span class=\"line\">        total:total,</span><br><span class=\"line\">        page:page</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n\n<ol start=\"3\">\n<li>可以使用自定义的参数来进行上下页面的切换，</li>\n</ol>\n<ul>\n<li>比如通过对地址栏数据的获取，判断当前页面所对应的页码，然后将此页码进行判断比如进行上一页的切换，如果页面-1小于1则使得当前的地址栏中的页码数等于一，反之使得在当前页码的基础上加一，下一页雷同 注意隐式算法</li>\n<li>第二种方法使用css将其隐藏，达到某个页码时将此模块显示</li>\n<li>使用第三方模块 pagination-sex-page下的参数执行第一步操作  ，在进行上下页切换时可以使用模块化语言 使用if判断 如果满足条件才让它显示出来</li>\n</ul>\n<h2 id=\"mongoDB数据库添加账号\"><a href=\"#mongoDB数据库添加账号\" class=\"headerlink\" title=\"mongoDB数据库添加账号\"></a>mongoDB数据库添加账号</h2><ol>\n<li>查看数据库  连接数据库<code> mongo</code>  查询数据库 <code>show dbs</code></li>\n<li>切换到admin数据库 <code>use admin </code> </li>\n<li>创建超级管理员账号<code> db.createUser(&#123;user:&#39;root&#39;,pwd:&#39;root&#39;,roles:[&#39;root&#39;]&#125;)</code></li>\n<li>切换到blog数据<code>user blog</code></li>\n<li>创建普通账号 <code>db.createUser(&#123;user:&#39;xxxx&#39;,pwd:&#39;xxxx&#39;,roles:[&#39;readWrite&#39;]&#125;)</code></li>\n<li>移除数据库 先停止<code> net stop mongodb</code>在使用<code>mongod --remove</code></li>\n<li>创建数据库环境 <code>mongod --logpath=&quot;D:\\mongoDB\\install\\server\\log\\newmongod.log&quot; --dbpath=&quot;D:\\mongoDB\\install\\server\\data&quot; --install --auth</code></li>\n<li>连接数据库 使用 <code>mongodb://普通用户名:用户名密码@localhost:端口号/要连接数据库名称</code></li>\n<li>启动数据库 <code>net start mongodb</code></li>\n</ol>\n<h2 id=\"开发环境和生产环境\"><a href=\"#开发环境和生产环境\" class=\"headerlink\" title=\"开发环境和生产环境\"></a>开发环境和生产环境</h2><ol>\n<li>使用process.env.某个指定的对象来判断当前的环境情况</li>\n<li>morgan(‘dev’)  在开发环境中将客户端发送到服务器端的请求信息打印到控制台中，只能在开发环境中使用</li>\n<li>production 生产环境</li>\n</ol>\n<h2 id=\"config模块\"><a href=\"#config模块\" class=\"headerlink\" title=\"config模块\"></a>config模块</h2><ol>\n<li>将不同运行环境下的应用配置信息抽离到单独的文件中，模块内部字段判断当前的运行环境，并读取对应的配置信息</li>\n<li>创建config文件夹  default  development production 三个json文件，通过require的方法导入    </li>\n<li>get方法，</li>\n<li>这个方法可以自动判断当前的运行环境，并根据相对应的配置信息返回，如果该环境配置下没有匹配到某个指定信息，则在其他的配置信息中自动查询</li>\n<li>将敏感配置信息存储在环境变量中<code>custom-environment-variables.json</code>  自定义环境变量</li>\n</ol>\n<h2 id=\"评论的创建\"><a href=\"#评论的创建\" class=\"headerlink\" title=\"评论的创建\"></a>评论的创建</h2><ol>\n<li>创建评论的集合规则 将评论属性的id值与文章的内容id进行关联， 设置其属性为 mongoose.Schema.Types.Objected, ref 为所关联集合名称</li>\n<li>建立评论的路由 只有当用户登录之后才可以使用评论的模块 创建评论的模块</li>\n<li>获取用户在文本框内输入的内容，将此内容通过所在的文章的id值新建一个数据库或者上传到文章的数据库页面</li>\n<li>用户需要登录后才能使用评论 在用户登录后判断如果登录的用户是超级管理员则将页面重定向到博客惯例页面如果是普通用户则将页面重定向到文章的首页</li>\n<li>将登录用户的role存储到session中，在对session进行拦截判断 并且将登录后的首页信息改为用户的信息对评论的状态进行配置，当用户登录后 在本地已经存储到一个userInfo，判断userInfo是否存在，如果存在则将评论模块呈现出来，如果未登录则将评论状态和首页头部的用户状态关闭</li>\n<li>渲染评论页面直接在文章页面渲染</li>\n<li>将用户信息渲染到页面页 创建评论路由 根据评论集合创建规则，上传集合对象  post请求后将页面重定向未当前页面</li>\n</ol>\n","categories":[{"name":"web","path":"api/categories/web.json"},{"name":"node.js","path":"api/categories/node.js.json"}],"tags":[]}