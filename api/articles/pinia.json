{"title":"Pinia学习笔记","slug":"pinia","date":"2022-06-14T07:22:58.000Z","updated":"2022-06-24T03:19:00.238Z","comments":true,"path":"api/articles/pinia.json","excerpt":null,"covers":null,"content":"<blockquote>\n<p>来自B站小满</p>\n</blockquote>\n<h2 id=\"Vuex-和-Pinia-的优缺点\"><a href=\"#Vuex-和-Pinia-的优缺点\" class=\"headerlink\" title=\"Vuex 和 Pinia 的优缺点\"></a>Vuex 和 Pinia 的优缺点</h2><h3 id=\"Pinia的优点\"><a href=\"#Pinia的优点\" class=\"headerlink\" title=\"Pinia的优点\"></a>Pinia的优点</h3><ul>\n<li><p>完整的 TypeScript 支持：与在 Vuex 中添加 TypeScript 相比，添加 TypeScript 更容易极其轻巧(体积约 1KB);store 的 action 被调度为常规的函数调用，而不是使用 dispatch 方法或 MapAction 辅助函数，这在 Vuex 中很常见支持多个Store,支持 Vue devtools、SSR 和 webpack 代码拆分。</p>\n<h3 id=\"Pinia的缺点\"><a href=\"#Pinia的缺点\" class=\"headerlink\" title=\"Pinia的缺点\"></a>Pinia的缺点</h3></li>\n<li><p>不支持时间旅行和编辑等调试功能</p>\n<h3 id=\"Vuex的优点\"><a href=\"#Vuex的优点\" class=\"headerlink\" title=\"Vuex的优点\"></a>Vuex的优点</h3></li>\n<li><p>支持调试功能，如时间旅行和编辑</p>\n</li>\n<li><p>适用于大型、高复杂度的Vue.js项目</p>\n</li>\n</ul>\n<h3 id=\"Vuex的缺点\"><a href=\"#Vuex的缺点\" class=\"headerlink\" title=\"Vuex的缺点\"></a>Vuex的缺点</h3><ul>\n<li>从 Vue 3 开始，getter 的结果不会像计算属性那样缓存</li>\n<li>Vuex 4有一些与类型安全相关的问题</li>\n</ul>\n<h2 id=\"pinia介绍\"><a href=\"#pinia介绍\" class=\"headerlink\" title=\"pinia介绍\"></a>pinia介绍</h2><ul>\n<li><p>Pinia.js 有如下特点：</p>\n</li>\n<li><p>完整的 ts 的支持；</p>\n</li>\n<li><p>足够轻量，压缩后的体积只有1kb左右;</p>\n</li>\n<li><p>去除 mutations，只有 state，getters，actions；</p>\n</li>\n<li><p>actions 支持同步和异步；</p>\n</li>\n<li><p>代码扁平化没有模块嵌套，只有 store 的概念，store 之间可以自由使用，每一个store都是独立的</p>\n</li>\n<li><p>无需手动添加 store，store 一旦创建便会自动添加；</p>\n</li>\n<li><p>支持Vue3 和 Vue2；</p>\n</li>\n</ul>\n<p><a href=\"https://blog.csdn.net/qq1195566313/article/details/123338137\">pinia使用介绍</a></p>\n<h2 id=\"pinia初始化store仓库\"><a href=\"#pinia初始化store仓库\" class=\"headerlink\" title=\"pinia初始化store仓库\"></a>pinia初始化store仓库</h2><ul>\n<li><a href=\"https://blog.csdn.net/qq1195566313/article/details/123342785\">store仓库</a></li>\n</ul>\n<h2 id=\"pinia修改值的几种方式\"><a href=\"#pinia修改值的几种方式\" class=\"headerlink\" title=\"pinia修改值的几种方式\"></a>pinia修改值的几种方式</h2><ul>\n<li><a href=\"https://blog.csdn.net/qq1195566313/article/details/123360349\">修改值的几种方式</a></li>\n</ul>\n<h2 id=\"解构state\"><a href=\"#解构state\" class=\"headerlink\" title=\"解构state\"></a>解构state</h2><ul>\n<li>直接解构state无法实现响应式</li>\n<li>使用storeToRefs将解构后 实现页面数据的响应式</li>\n</ul>\n<h2 id=\"pinia中的actions和getters\"><a href=\"#pinia中的actions和getters\" class=\"headerlink\" title=\"pinia中的actions和getters\"></a>pinia中的actions和getters</h2><ul>\n<li><a href=\"https://blog.csdn.net/qq1195566313/article/details/123376269\">getter和actions</a></li>\n</ul>\n<h2 id=\"pinia插件\"><a href=\"#pinia插件\" class=\"headerlink\" title=\"pinia插件\"></a>pinia插件</h2><ul>\n<li><a href=\"https://blog.csdn.net/qq1195566313/article/details/123431769\">pinia缓冲插件</a></li>\n</ul>\n","more":"<blockquote>\n<p>来自B站小满</p>\n</blockquote>\n<h2 id=\"Vuex-和-Pinia-的优缺点\"><a href=\"#Vuex-和-Pinia-的优缺点\" class=\"headerlink\" title=\"Vuex 和 Pinia 的优缺点\"></a>Vuex 和 Pinia 的优缺点</h2><h3 id=\"Pinia的优点\"><a href=\"#Pinia的优点\" class=\"headerlink\" title=\"Pinia的优点\"></a>Pinia的优点</h3><ul>\n<li><p>完整的 TypeScript 支持：与在 Vuex 中添加 TypeScript 相比，添加 TypeScript 更容易极其轻巧(体积约 1KB);store 的 action 被调度为常规的函数调用，而不是使用 dispatch 方法或 MapAction 辅助函数，这在 Vuex 中很常见支持多个Store,支持 Vue devtools、SSR 和 webpack 代码拆分。</p>\n<h3 id=\"Pinia的缺点\"><a href=\"#Pinia的缺点\" class=\"headerlink\" title=\"Pinia的缺点\"></a>Pinia的缺点</h3></li>\n<li><p>不支持时间旅行和编辑等调试功能</p>\n<h3 id=\"Vuex的优点\"><a href=\"#Vuex的优点\" class=\"headerlink\" title=\"Vuex的优点\"></a>Vuex的优点</h3></li>\n<li><p>支持调试功能，如时间旅行和编辑</p>\n</li>\n<li><p>适用于大型、高复杂度的Vue.js项目</p>\n</li>\n</ul>\n<h3 id=\"Vuex的缺点\"><a href=\"#Vuex的缺点\" class=\"headerlink\" title=\"Vuex的缺点\"></a>Vuex的缺点</h3><ul>\n<li>从 Vue 3 开始，getter 的结果不会像计算属性那样缓存</li>\n<li>Vuex 4有一些与类型安全相关的问题</li>\n</ul>\n<h2 id=\"pinia介绍\"><a href=\"#pinia介绍\" class=\"headerlink\" title=\"pinia介绍\"></a>pinia介绍</h2><ul>\n<li><p>Pinia.js 有如下特点：</p>\n</li>\n<li><p>完整的 ts 的支持；</p>\n</li>\n<li><p>足够轻量，压缩后的体积只有1kb左右;</p>\n</li>\n<li><p>去除 mutations，只有 state，getters，actions；</p>\n</li>\n<li><p>actions 支持同步和异步；</p>\n</li>\n<li><p>代码扁平化没有模块嵌套，只有 store 的概念，store 之间可以自由使用，每一个store都是独立的</p>\n</li>\n<li><p>无需手动添加 store，store 一旦创建便会自动添加；</p>\n</li>\n<li><p>支持Vue3 和 Vue2；</p>\n</li>\n</ul>\n<p><a href=\"https://blog.csdn.net/qq1195566313/article/details/123338137\">pinia使用介绍</a></p>\n<h2 id=\"pinia初始化store仓库\"><a href=\"#pinia初始化store仓库\" class=\"headerlink\" title=\"pinia初始化store仓库\"></a>pinia初始化store仓库</h2><ul>\n<li><a href=\"https://blog.csdn.net/qq1195566313/article/details/123342785\">store仓库</a></li>\n</ul>\n<h2 id=\"pinia修改值的几种方式\"><a href=\"#pinia修改值的几种方式\" class=\"headerlink\" title=\"pinia修改值的几种方式\"></a>pinia修改值的几种方式</h2><ul>\n<li><a href=\"https://blog.csdn.net/qq1195566313/article/details/123360349\">修改值的几种方式</a></li>\n</ul>\n<h2 id=\"解构state\"><a href=\"#解构state\" class=\"headerlink\" title=\"解构state\"></a>解构state</h2><ul>\n<li>直接解构state无法实现响应式</li>\n<li>使用storeToRefs将解构后 实现页面数据的响应式</li>\n</ul>\n<h2 id=\"pinia中的actions和getters\"><a href=\"#pinia中的actions和getters\" class=\"headerlink\" title=\"pinia中的actions和getters\"></a>pinia中的actions和getters</h2><ul>\n<li><a href=\"https://blog.csdn.net/qq1195566313/article/details/123376269\">getter和actions</a></li>\n</ul>\n<h2 id=\"pinia插件\"><a href=\"#pinia插件\" class=\"headerlink\" title=\"pinia插件\"></a>pinia插件</h2><ul>\n<li><a href=\"https://blog.csdn.net/qq1195566313/article/details/123431769\">pinia缓冲插件</a></li>\n</ul>\n","categories":[{"name":"学习笔记","path":"api/categories/学习笔记.json"},{"name":"pinia","path":"api/categories/pinia.json"}],"tags":[]}